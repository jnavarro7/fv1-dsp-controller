ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,2,4
  24              		.comm	ADC_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 4
  29              	ADC_channelsConfig:
  30 0000 00000000 		.space	4
  31              		.section	.text.ADC_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_Start, %function
  37              	ADC_Start:
  38              	.LFB0:
  39              		.file 1 "Generated_Source\\PSoC4\\ADC.c"
   1:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:Generated_Source\PSoC4/ADC.c **** * Version 2.40
   4:Generated_Source\PSoC4/ADC.c **** *
   5:Generated_Source\PSoC4/ADC.c **** * Description:
   6:Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/ADC.c **** *
   9:Generated_Source\PSoC4/ADC.c **** * Note:
  10:Generated_Source\PSoC4/ADC.c **** *
  11:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/ADC.c **** 
  18:Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 2


  19:Generated_Source\PSoC4/ADC.c **** 
  20:Generated_Source\PSoC4/ADC.c **** 
  21:Generated_Source\PSoC4/ADC.c **** /***************************************
  22:Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:Generated_Source\PSoC4/ADC.c **** 
  28:Generated_Source\PSoC4/ADC.c **** 
  29:Generated_Source\PSoC4/ADC.c **** /***************************************
  30:Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000000u };
  34:Generated_Source\PSoC4/ADC.c **** 
  35:Generated_Source\PSoC4/ADC.c **** 
  36:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:Generated_Source\PSoC4/ADC.c **** *
  40:Generated_Source\PSoC4/ADC.c **** * Summary:
  41:Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/ADC.c **** *
  45:Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:Generated_Source\PSoC4/ADC.c **** *  None.
  47:Generated_Source\PSoC4/ADC.c **** *
  48:Generated_Source\PSoC4/ADC.c **** * Return:
  49:Generated_Source\PSoC4/ADC.c **** *  None.
  50:Generated_Source\PSoC4/ADC.c **** *
  51:Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:Generated_Source\PSoC4/ADC.c **** *
  62:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:Generated_Source\PSoC4/ADC.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  48              		.loc 1 66 0
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 3


  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:Generated_Source\PSoC4/ADC.c ****     {
  68:Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_Init
  69:Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:Generated_Source\PSoC4/ADC.c ****     }
  71:Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_Enable
  72:Generated_Source\PSoC4/ADC.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_initVar
  70              		.cfi_endproc
  71              	.LFE0:
  72              		.size	ADC_Start, .-ADC_Start
  73              		.global	__aeabi_idiv
  74              		.section	.text.ADC_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_Init, %function
  80              	ADC_Init:
  81              	.LFB1:
  73:Generated_Source\PSoC4/ADC.c **** 
  74:Generated_Source\PSoC4/ADC.c **** 
  75:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:Generated_Source\PSoC4/ADC.c **** *
  79:Generated_Source\PSoC4/ADC.c **** * Summary:
  80:Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:Generated_Source\PSoC4/ADC.c **** *
  84:Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:Generated_Source\PSoC4/ADC.c **** *  None.
  86:Generated_Source\PSoC4/ADC.c **** *
  87:Generated_Source\PSoC4/ADC.c **** * Return:
  88:Generated_Source\PSoC4/ADC.c **** *  None.
  89:Generated_Source\PSoC4/ADC.c **** *
  90:Generated_Source\PSoC4/ADC.c **** * Global variables:
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 4


  91:Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:Generated_Source\PSoC4/ADC.c **** *
  93:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:Generated_Source\PSoC4/ADC.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 80B5     		push	{r7, lr}
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 84B0     		sub	sp, sp, #16
  89              		.cfi_def_cfa_offset 24
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  96:Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:Generated_Source\PSoC4/ADC.c **** 
 100:Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:Generated_Source\PSoC4/ADC.c ****         {
 103:Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 5


 138:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/ADC.c ****         };
 168:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/ADC.c **** 
 170:Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  92              		.loc 1 172 0
  93 0006 0E20     		mov	r0, #14
  94 0008 0321     		mov	r1, #3
  95 000a FFF7FEFF 		bl	CyIntSetPriority
 173:Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  96              		.loc 1 173 0
  97 000e 524B     		ldr	r3, .L16
  98 0010 0E20     		mov	r0, #14
  99 0012 191C     		mov	r1, r3
 100 0014 FFF7FEFF 		bl	CyIntSetVector
 174:Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:Generated_Source\PSoC4/ADC.c **** 
 176:Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 101              		.loc 1 177 0
 102 0018 504B     		ldr	r3, .L16+4
 103 001a 0122     		mov	r2, #1
 104 001c 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 179:Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 105              		.loc 1 180 0
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 6


 106 001e 504B     		ldr	r3, .L16+8
 107 0020 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 108              		.loc 1 178 0
 109 0022 002B     		cmp	r3, #0
 110 0024 01DA     		bge	.L6
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 111              		.loc 1 178 0 is_stmt 0 discriminator 1
 112 0026 4F49     		ldr	r1, .L16+12
 113 0028 00E0     		b	.L7
 114              	.L6:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 115              		.loc 1 178 0 discriminator 2
 116 002a 4F49     		ldr	r1, .L16+16
 117              	.L7:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 118              		.loc 1 178 0 discriminator 4
 119 002c 4F4B     		ldr	r3, .L16+20
 120 002e 4F4A     		ldr	r2, .L16+20
 121 0030 1268     		ldr	r2, [r2]
 122 0032 0A43     		orr	r2, r1
 123 0034 1A60     		str	r2, [r3]
 181:Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 124              		.loc 1 182 0 is_stmt 1 discriminator 4
 125 0036 4E4B     		ldr	r3, .L16+24
 126 0038 4E4A     		ldr	r2, .L16+28
 127 003a 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 128              		.loc 1 183 0 discriminator 4
 129 003c 4E4B     		ldr	r3, .L16+32
 130 003e 4F4A     		ldr	r2, .L16+36
 131 0040 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 132              		.loc 1 184 0 discriminator 4
 133 0042 4F4B     		ldr	r3, .L16+40
 134 0044 0022     		mov	r2, #0
 135 0046 1A60     		str	r2, [r3]
 185:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 136              		.loc 1 185 0 discriminator 4
 137 0048 4E4B     		ldr	r3, .L16+44
 138 004a 4F4A     		ldr	r2, .L16+48
 139 004c 1A60     		str	r2, [r3]
 186:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 140              		.loc 1 186 0 discriminator 4
 141 004e 4F4B     		ldr	r3, .L16+52
 142 0050 4D4A     		ldr	r2, .L16+48
 143 0052 1A60     		str	r2, [r3]
 187:Generated_Source\PSoC4/ADC.c ****     
 188:Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 190:Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 144              		.loc 1 190 0 discriminator 4
 145 0054 4E4B     		ldr	r3, .L16+56
 146 0056 4E4A     		ldr	r2, .L16+56
 147 0058 1268     		ldr	r2, [r2]
 148 005a 8021     		mov	r1, #128
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 7


 149 005c 4902     		lsl	r1, r1, #9
 150 005e 0A43     		orr	r2, r1
 151 0060 1A60     		str	r2, [r3]
 191:Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 194:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/ADC.c **** 
 197:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 152              		.loc 1 197 0 discriminator 4
 153 0062 4C4B     		ldr	r3, .L16+60
 154 0064 0022     		mov	r2, #0
 155 0066 1A60     		str	r2, [r3]
 198:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 156              		.loc 1 198 0 discriminator 4
 157 0068 4B4B     		ldr	r3, .L16+64
 158 006a 0022     		mov	r2, #0
 159 006c 1A60     		str	r2, [r3]
 199:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 160              		.loc 1 199 0 discriminator 4
 161 006e 4B4B     		ldr	r3, .L16+68
 162 0070 0122     		mov	r2, #1
 163 0072 1A60     		str	r2, [r3]
 200:Generated_Source\PSoC4/ADC.c **** 
 201:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 164              		.loc 1 202 0 discriminator 4
 165 0074 4A4B     		ldr	r3, .L16+72
 166 0076 0222     		mov	r2, #2
 167 0078 1A60     		str	r2, [r3]
 203:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/ADC.c **** 
 205:Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 168              		.loc 1 206 0 discriminator 4
 169 007a 4A4B     		ldr	r3, .L16+76
 170 007c 1B68     		ldr	r3, [r3]
 171 007e 7B60     		str	r3, [r7, #4]
 207:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 172              		.loc 1 207 0 discriminator 4
 173 0080 7B68     		ldr	r3, [r7, #4]
 174 0082 494A     		ldr	r2, .L16+80
 175 0084 1340     		and	r3, r2
 176 0086 7B60     		str	r3, [r7, #4]
 208:Generated_Source\PSoC4/ADC.c ****     
 209:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 213:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 177              		.loc 1 213 0 discriminator 4
 178 0088 7B68     		ldr	r3, [r7, #4]
 179 008a 0122     		mov	r2, #1
 180 008c 1343     		orr	r3, r2
 181 008e 7B60     		str	r3, [r7, #4]
 214:Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 8


 215:Generated_Source\PSoC4/ADC.c ****     #else
 216:Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 217:Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:Generated_Source\PSoC4/ADC.c ****         #else
 220:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 221:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 222:Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/ADC.c ****     
 226:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 182              		.loc 1 226 0 discriminator 4
 183 0090 444B     		ldr	r3, .L16+76
 184 0092 7A68     		ldr	r2, [r7, #4]
 185 0094 1A60     		str	r2, [r3]
 227:Generated_Source\PSoC4/ADC.c **** 
 228:Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 229:Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:Generated_Source\PSoC4/ADC.c **** 
 232:Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 186              		.loc 1 232 0 discriminator 4
 187 0096 0023     		mov	r3, #0
 188 0098 FB60     		str	r3, [r7, #12]
 189 009a 57E0     		b	.L8
 190              	.L15:
 233:Generated_Source\PSoC4/ADC.c ****     {
 234:Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 191              		.loc 1 234 0
 192 009c 0022     		mov	r2, #0
 193 009e DC23     		mov	r3, #220
 194 00a0 9B01     		lsl	r3, r3, #6
 195 00a2 1340     		and	r3, r2
 196 00a4 7B60     		str	r3, [r7, #4]
 235:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 236:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 237:Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/ADC.c ****         
 239:Generated_Source\PSoC4/ADC.c ****         
 240:Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/ADC.c ****         */
 244:Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 248:Generated_Source\PSoC4/ADC.c **** 
 249:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/ADC.c ****         {
 253:Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 197              		.loc 1 253 0
 198 00a6 FB68     		ldr	r3, [r7, #12]
 199 00a8 9B00     		lsl	r3, r3, #2
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 9


 200 00aa 404A     		ldr	r2, .L16+84
 201 00ac 9446     		mov	ip, r2
 202 00ae 6344     		add	r3, r3, ip
 203 00b0 7A68     		ldr	r2, [r7, #4]
 204 00b2 1A60     		str	r2, [r3]
 254:Generated_Source\PSoC4/ADC.c **** 
 255:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 205              		.loc 1 255 0
 206 00b4 0022     		mov	r2, #0
 207 00b6 0123     		mov	r3, #1
 208 00b8 1340     		and	r3, r2
 209 00ba 09D0     		beq	.L9
 256:Generated_Source\PSoC4/ADC.c ****             {
 257:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 210              		.loc 1 257 0
 211 00bc 354B     		ldr	r3, .L16+60
 212 00be 354A     		ldr	r2, .L16+60
 213 00c0 1268     		ldr	r2, [r2]
 214 00c2 F968     		ldr	r1, [r7, #12]
 215 00c4 0120     		mov	r0, #1
 216 00c6 8840     		lsl	r0, r0, r1
 217 00c8 011C     		mov	r1, r0
 218 00ca 89B2     		uxth	r1, r1
 219 00cc 0A43     		orr	r2, r1
 220 00ce 1A60     		str	r2, [r3]
 221              	.L9:
 258:Generated_Source\PSoC4/ADC.c ****             }
 259:Generated_Source\PSoC4/ADC.c **** 
 260:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 222              		.loc 1 260 0
 223 00d0 0022     		mov	r2, #0
 224 00d2 0223     		mov	r3, #2
 225 00d4 1340     		and	r3, r2
 226 00d6 09D0     		beq	.L10
 261:Generated_Source\PSoC4/ADC.c ****             {
 262:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 227              		.loc 1 262 0
 228 00d8 2F4B     		ldr	r3, .L16+64
 229 00da 2F4A     		ldr	r2, .L16+64
 230 00dc 1268     		ldr	r2, [r2]
 231 00de F968     		ldr	r1, [r7, #12]
 232 00e0 0120     		mov	r0, #1
 233 00e2 8840     		lsl	r0, r0, r1
 234 00e4 011C     		mov	r1, r0
 235 00e6 89B2     		uxth	r1, r1
 236 00e8 0A43     		orr	r2, r1
 237 00ea 1A60     		str	r2, [r3]
 238              	.L10:
 263:Generated_Source\PSoC4/ADC.c ****             }
 264:Generated_Source\PSoC4/ADC.c ****         }
 265:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/ADC.c ****             else
 267:Generated_Source\PSoC4/ADC.c ****             {
 268:Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 269:Generated_Source\PSoC4/ADC.c **** 
 270:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 271:Generated_Source\PSoC4/ADC.c ****                 {
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 10


 272:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/ADC.c ****                 }
 274:Generated_Source\PSoC4/ADC.c **** 
 275:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:Generated_Source\PSoC4/ADC.c ****                 {
 277:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/ADC.c ****                 }
 279:Generated_Source\PSoC4/ADC.c ****             }
 280:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/ADC.c **** 
 282:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 239              		.loc 1 282 0
 240 00ec 0022     		mov	r2, #0
 241 00ee 8023     		mov	r3, #128
 242 00f0 9B00     		lsl	r3, r3, #2
 243 00f2 1340     		and	r3, r2
 244 00f4 03D0     		beq	.L11
 283:Generated_Source\PSoC4/ADC.c ****         {
 284:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 245              		.loc 1 284 0
 246 00f6 8023     		mov	r3, #128
 247 00f8 5B00     		lsl	r3, r3, #1
 248 00fa BB60     		str	r3, [r7, #8]
 249 00fc 02E0     		b	.L12
 250              	.L11:
 285:Generated_Source\PSoC4/ADC.c ****         }
 286:Generated_Source\PSoC4/ADC.c ****         else
 287:Generated_Source\PSoC4/ADC.c ****         {
 288:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 251              		.loc 1 288 0
 252 00fe 8023     		mov	r3, #128
 253 0100 5B01     		lsl	r3, r3, #5
 254 0102 BB60     		str	r3, [r7, #8]
 255              	.L12:
 289:Generated_Source\PSoC4/ADC.c ****         }
 290:Generated_Source\PSoC4/ADC.c **** 
 291:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 256              		.loc 1 291 0
 257 0104 0022     		mov	r2, #0
 258 0106 8023     		mov	r3, #128
 259 0108 5B00     		lsl	r3, r3, #1
 260 010a 1340     		and	r3, r2
 261 010c 05D1     		bne	.L13
 292:Generated_Source\PSoC4/ADC.c ****         {
 293:Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 297:Generated_Source\PSoC4/ADC.c ****             #else
 298:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 262              		.loc 1 298 0
 263 010e 284B     		ldr	r3, .L16+88
 264 0110 FA68     		ldr	r2, [r7, #12]
 265 0112 5200     		lsl	r2, r2, #1
 266 0114 0021     		mov	r1, #0
 267 0116 D152     		strh	r1, [r2, r3]
 268 0118 04E0     		b	.L14
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 11


 269              	.L13:
 299:Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:Generated_Source\PSoC4/ADC.c ****         }
 301:Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/ADC.c ****         {
 303:Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 306:Generated_Source\PSoC4/ADC.c ****             #else
 307:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 270              		.loc 1 307 0
 271 011a 254B     		ldr	r3, .L16+88
 272 011c FA68     		ldr	r2, [r7, #12]
 273 011e 5200     		lsl	r2, r2, #1
 274 0120 0021     		mov	r1, #0
 275 0122 D152     		strh	r1, [r2, r3]
 276              	.L14:
 308:Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:Generated_Source\PSoC4/ADC.c ****         }
 310:Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 277              		.loc 1 311 0 discriminator 2
 278 0124 BB68     		ldr	r3, [r7, #8]
 279 0126 234A     		ldr	r2, .L16+92
 280 0128 5343     		mul	r3, r2
 281 012a 234A     		ldr	r2, .L16+96
 282 012c 9446     		mov	ip, r2
 283 012e 6344     		add	r3, r3, ip
 312:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 284              		.loc 1 312 0 discriminator 2
 285 0130 181C     		mov	r0, r3
 286 0132 2249     		ldr	r1, .L16+100
 287 0134 FFF7FEFF 		bl	__aeabi_idiv
 288 0138 031C     		mov	r3, r0
 311:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 289              		.loc 1 311 0 discriminator 2
 290 013a 9BB2     		uxth	r3, r3
 291 013c 19B2     		sxth	r1, r3
 292 013e 204B     		ldr	r3, .L16+104
 293 0140 FA68     		ldr	r2, [r7, #12]
 294 0142 9200     		lsl	r2, r2, #2
 295 0144 D150     		str	r1, [r2, r3]
 232:Generated_Source\PSoC4/ADC.c ****     {
 296              		.loc 1 232 0 discriminator 2
 297 0146 FB68     		ldr	r3, [r7, #12]
 298 0148 0133     		add	r3, r3, #1
 299 014a FB60     		str	r3, [r7, #12]
 300              	.L8:
 232:Generated_Source\PSoC4/ADC.c ****     {
 301              		.loc 1 232 0 is_stmt 0 discriminator 1
 302 014c FB68     		ldr	r3, [r7, #12]
 303 014e 002B     		cmp	r3, #0
 304 0150 A4D0     		beq	.L15
 313:Generated_Source\PSoC4/ADC.c ****     }
 314:Generated_Source\PSoC4/ADC.c **** }
 305              		.loc 1 314 0 is_stmt 1
 306 0152 BD46     		mov	sp, r7
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 12


 307 0154 04B0     		add	sp, sp, #16
 308              		@ sp needed
 309 0156 80BD     		pop	{r7, pc}
 310              	.L17:
 311              		.align	2
 312              	.L16:
 313 0158 00000000 		.word	ADC_ISR
 314 015c 20001A40 		.word	1075445792
 315 0160 80031A40 		.word	1075446656
 316 0164 70021051 		.word	1360003696
 317 0168 70020051 		.word	1358955120
 318 016c 00001A40 		.word	1075445760
 319 0170 04001A40 		.word	1075445764
 320 0174 8C000080 		.word	-2147483508
 321 0178 18001A40 		.word	1075445784
 322 017c 0000FF07 		.word	134152192
 323 0180 1C001A40 		.word	1075445788
 324 0184 10001A40 		.word	1075445776
 325 0188 02000200 		.word	131074
 326 018c 14001A40 		.word	1075445780
 327 0190 00031A40 		.word	1075446528
 328 0194 28021A40 		.word	1075446312
 329 0198 38021A40 		.word	1075446328
 330 019c 18021A40 		.word	1075446296
 331 01a0 000F1A40 		.word	1075449600
 332 01a4 30001A40 		.word	1075445808
 333 01a8 FFFFFFDF 		.word	-536870913
 334 01ac 80001A40 		.word	1075445888
 335 01b0 00000000 		.word	ADC_offset
 336 01b4 10270000 		.word	10000
 337 01b8 E40C0000 		.word	3300
 338 01bc C8190000 		.word	6600
 339 01c0 00000000 		.word	ADC_countsPer10Volt
 340              		.cfi_endproc
 341              	.LFE1:
 342              		.size	ADC_Init, .-ADC_Init
 343              		.section	.text.ADC_Enable,"ax",%progbits
 344              		.align	2
 345              		.global	ADC_Enable
 346              		.code	16
 347              		.thumb_func
 348              		.type	ADC_Enable, %function
 349              	ADC_Enable:
 350              	.LFB2:
 315:Generated_Source\PSoC4/ADC.c **** 
 316:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 319:Generated_Source\PSoC4/ADC.c **** *
 320:Generated_Source\PSoC4/ADC.c **** * Summary:
 321:Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/ADC.c **** *
 323:Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:Generated_Source\PSoC4/ADC.c **** *  None.
 325:Generated_Source\PSoC4/ADC.c **** *
 326:Generated_Source\PSoC4/ADC.c **** * Return:
 327:Generated_Source\PSoC4/ADC.c **** *  None.
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 13


 328:Generated_Source\PSoC4/ADC.c **** *
 329:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:Generated_Source\PSoC4/ADC.c **** {
 351              		.loc 1 331 0
 352              		.cfi_startproc
 353 0000 80B5     		push	{r7, lr}
 354              		.cfi_def_cfa_offset 8
 355              		.cfi_offset 7, -8
 356              		.cfi_offset 14, -4
 357 0002 00AF     		add	r7, sp, #0
 358              		.cfi_def_cfa_register 7
 332:Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 359              		.loc 1 332 0
 360 0004 074B     		ldr	r3, .L20
 361 0006 1B68     		ldr	r3, [r3]
 362 0008 002B     		cmp	r3, #0
 363 000a 09DB     		blt	.L18
 333:Generated_Source\PSoC4/ADC.c ****     {
 334:Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/ADC.c **** 
 336:Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 337:Generated_Source\PSoC4/ADC.c ****             {
 338:Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/ADC.c ****             }
 340:Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/ADC.c ****         
 342:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 364              		.loc 1 342 0
 365 000c 054B     		ldr	r3, .L20
 366 000e 054A     		ldr	r2, .L20
 367 0010 1268     		ldr	r2, [r2]
 368 0012 8021     		mov	r1, #128
 369 0014 0906     		lsl	r1, r1, #24
 370 0016 0A43     		orr	r2, r1
 371 0018 1A60     		str	r2, [r3]
 343:Generated_Source\PSoC4/ADC.c ****         
 344:Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 372              		.loc 1 345 0
 373 001a 0A20     		mov	r0, #10
 374 001c FFF7FEFF 		bl	CyDelayUs
 375              	.L18:
 346:Generated_Source\PSoC4/ADC.c ****     }
 347:Generated_Source\PSoC4/ADC.c **** }
 376              		.loc 1 347 0
 377 0020 BD46     		mov	sp, r7
 378              		@ sp needed
 379 0022 80BD     		pop	{r7, pc}
 380              	.L21:
 381              		.align	2
 382              	.L20:
 383 0024 00001A40 		.word	1075445760
 384              		.cfi_endproc
 385              	.LFE2:
 386              		.size	ADC_Enable, .-ADC_Enable
 387              		.section	.text.ADC_Stop,"ax",%progbits
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 14


 388              		.align	2
 389              		.global	ADC_Stop
 390              		.code	16
 391              		.thumb_func
 392              		.type	ADC_Stop, %function
 393              	ADC_Stop:
 394              	.LFB3:
 348:Generated_Source\PSoC4/ADC.c **** 
 349:Generated_Source\PSoC4/ADC.c **** 
 350:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 352:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:Generated_Source\PSoC4/ADC.c **** *
 354:Generated_Source\PSoC4/ADC.c **** * Summary:
 355:Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/ADC.c **** *  mode.
 357:Generated_Source\PSoC4/ADC.c **** *
 358:Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:Generated_Source\PSoC4/ADC.c **** *  None.
 360:Generated_Source\PSoC4/ADC.c **** *
 361:Generated_Source\PSoC4/ADC.c **** * Return:
 362:Generated_Source\PSoC4/ADC.c **** *  None.
 363:Generated_Source\PSoC4/ADC.c **** *
 364:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:Generated_Source\PSoC4/ADC.c **** {
 395              		.loc 1 366 0
 396              		.cfi_startproc
 397 0000 80B5     		push	{r7, lr}
 398              		.cfi_def_cfa_offset 8
 399              		.cfi_offset 7, -8
 400              		.cfi_offset 14, -4
 401 0002 00AF     		add	r7, sp, #0
 402              		.cfi_def_cfa_register 7
 367:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 403              		.loc 1 367 0
 404 0004 034B     		ldr	r3, .L23
 405 0006 034A     		ldr	r2, .L23
 406 0008 1268     		ldr	r2, [r2]
 407 000a 5200     		lsl	r2, r2, #1
 408 000c 5208     		lsr	r2, r2, #1
 409 000e 1A60     		str	r2, [r3]
 368:Generated_Source\PSoC4/ADC.c **** }
 410              		.loc 1 368 0
 411 0010 BD46     		mov	sp, r7
 412              		@ sp needed
 413 0012 80BD     		pop	{r7, pc}
 414              	.L24:
 415              		.align	2
 416              	.L23:
 417 0014 00001A40 		.word	1075445760
 418              		.cfi_endproc
 419              	.LFE3:
 420              		.size	ADC_Stop, .-ADC_Stop
 421              		.section	.text.ADC_StartConvert,"ax",%progbits
 422              		.align	2
 423              		.global	ADC_StartConvert
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 15


 424              		.code	16
 425              		.thumb_func
 426              		.type	ADC_StartConvert, %function
 427              	ADC_StartConvert:
 428              	.LFB4:
 369:Generated_Source\PSoC4/ADC.c **** 
 370:Generated_Source\PSoC4/ADC.c **** 
 371:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 373:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:Generated_Source\PSoC4/ADC.c **** *
 375:Generated_Source\PSoC4/ADC.c **** * Summary:
 376:Generated_Source\PSoC4/ADC.c **** *  Description:
 377:Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:Generated_Source\PSoC4/ADC.c **** *
 380:Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/ADC.c **** *
 384:Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:Generated_Source\PSoC4/ADC.c **** *  None.
 386:Generated_Source\PSoC4/ADC.c **** *
 387:Generated_Source\PSoC4/ADC.c **** * Return:
 388:Generated_Source\PSoC4/ADC.c **** *  None.
 389:Generated_Source\PSoC4/ADC.c **** *
 390:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:Generated_Source\PSoC4/ADC.c **** {
 429              		.loc 1 392 0
 430              		.cfi_startproc
 431 0000 80B5     		push	{r7, lr}
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 7, -8
 434              		.cfi_offset 14, -4
 435 0002 00AF     		add	r7, sp, #0
 436              		.cfi_def_cfa_register 7
 393:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 437              		.loc 1 394 0
 438 0004 044B     		ldr	r3, .L26
 439 0006 044A     		ldr	r2, .L26
 440 0008 1268     		ldr	r2, [r2]
 441 000a 8021     		mov	r1, #128
 442 000c 4902     		lsl	r1, r1, #9
 443 000e 0A43     		orr	r2, r1
 444 0010 1A60     		str	r2, [r3]
 395:Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 397:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:Generated_Source\PSoC4/ADC.c **** 
 399:Generated_Source\PSoC4/ADC.c **** }
 445              		.loc 1 399 0
 446 0012 BD46     		mov	sp, r7
 447              		@ sp needed
 448 0014 80BD     		pop	{r7, pc}
 449              	.L27:
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 16


 450 0016 C046     		.align	2
 451              	.L26:
 452 0018 04001A40 		.word	1075445764
 453              		.cfi_endproc
 454              	.LFE4:
 455              		.size	ADC_StartConvert, .-ADC_StartConvert
 456              		.section	.text.ADC_StopConvert,"ax",%progbits
 457              		.align	2
 458              		.global	ADC_StopConvert
 459              		.code	16
 460              		.thumb_func
 461              		.type	ADC_StopConvert, %function
 462              	ADC_StopConvert:
 463              	.LFB5:
 400:Generated_Source\PSoC4/ADC.c **** 
 401:Generated_Source\PSoC4/ADC.c **** 
 402:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:Generated_Source\PSoC4/ADC.c **** *
 406:Generated_Source\PSoC4/ADC.c **** * Summary:
 407:Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/ADC.c **** *
 409:Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:Generated_Source\PSoC4/ADC.c **** *  None.
 411:Generated_Source\PSoC4/ADC.c **** *
 412:Generated_Source\PSoC4/ADC.c **** * Return:
 413:Generated_Source\PSoC4/ADC.c **** *  None.
 414:Generated_Source\PSoC4/ADC.c **** *
 415:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:Generated_Source\PSoC4/ADC.c **** {
 464              		.loc 1 417 0
 465              		.cfi_startproc
 466 0000 80B5     		push	{r7, lr}
 467              		.cfi_def_cfa_offset 8
 468              		.cfi_offset 7, -8
 469              		.cfi_offset 14, -4
 470 0002 00AF     		add	r7, sp, #0
 471              		.cfi_def_cfa_register 7
 418:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 472              		.loc 1 419 0
 473 0004 034B     		ldr	r3, .L29
 474 0006 034A     		ldr	r2, .L29
 475 0008 1268     		ldr	r2, [r2]
 476 000a 0349     		ldr	r1, .L29+4
 477 000c 0A40     		and	r2, r1
 478 000e 1A60     		str	r2, [r3]
 420:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:Generated_Source\PSoC4/ADC.c **** }
 479              		.loc 1 421 0
 480 0010 BD46     		mov	sp, r7
 481              		@ sp needed
 482 0012 80BD     		pop	{r7, pc}
 483              	.L30:
 484              		.align	2
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 17


 485              	.L29:
 486 0014 04001A40 		.word	1075445764
 487 0018 FFFFFEFF 		.word	-65537
 488              		.cfi_endproc
 489              	.LFE5:
 490              		.size	ADC_StopConvert, .-ADC_StopConvert
 491              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 492              		.align	2
 493              		.global	ADC_IsEndConversion
 494              		.code	16
 495              		.thumb_func
 496              		.type	ADC_IsEndConversion, %function
 497              	ADC_IsEndConversion:
 498              	.LFB6:
 422:Generated_Source\PSoC4/ADC.c **** 
 423:Generated_Source\PSoC4/ADC.c **** 
 424:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 427:Generated_Source\PSoC4/ADC.c **** *
 428:Generated_Source\PSoC4/ADC.c **** * Summary:
 429:Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/ADC.c **** *  completed.
 436:Generated_Source\PSoC4/ADC.c **** *
 437:Generated_Source\PSoC4/ADC.c **** * Parameters:
 438:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:Generated_Source\PSoC4/ADC.c **** *
 445:Generated_Source\PSoC4/ADC.c **** * Return:
 446:Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/ADC.c **** *
 449:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/ADC.c **** {
 499              		.loc 1 451 0
 500              		.cfi_startproc
 501 0000 80B5     		push	{r7, lr}
 502              		.cfi_def_cfa_offset 8
 503              		.cfi_offset 7, -8
 504              		.cfi_offset 14, -4
 505 0002 84B0     		sub	sp, sp, #16
 506              		.cfi_def_cfa_offset 24
 507 0004 00AF     		add	r7, sp, #0
 508              		.cfi_def_cfa_register 7
 509 0006 7860     		str	r0, [r7, #4]
 452:Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 510              		.loc 1 452 0
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 18


 511 0008 0023     		mov	r3, #0
 512 000a FB60     		str	r3, [r7, #12]
 453:Generated_Source\PSoC4/ADC.c **** 
 454:Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 513              		.loc 1 454 0
 514 000c 7B68     		ldr	r3, [r7, #4]
 515 000e 0322     		mov	r2, #3
 516 0010 1340     		and	r3, r2
 517 0012 11D0     		beq	.L32
 518              	.L34:
 455:Generated_Source\PSoC4/ADC.c ****     {
 456:Generated_Source\PSoC4/ADC.c ****         do
 457:Generated_Source\PSoC4/ADC.c ****         {
 458:Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 519              		.loc 1 458 0 discriminator 2
 520 0014 0B4B     		ldr	r3, .L36
 521 0016 1B68     		ldr	r3, [r3]
 522 0018 0122     		mov	r2, #1
 523 001a 1340     		and	r3, r2
 524 001c FB60     		str	r3, [r7, #12]
 459:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 525              		.loc 1 459 0 discriminator 2
 526 001e FB68     		ldr	r3, [r7, #12]
 527 0020 002B     		cmp	r3, #0
 528 0022 03D1     		bne	.L33
 529              		.loc 1 459 0 is_stmt 0 discriminator 1
 530 0024 7B68     		ldr	r3, [r7, #4]
 531 0026 0222     		mov	r2, #2
 532 0028 1340     		and	r3, r2
 533 002a F3D1     		bne	.L34
 534              	.L33:
 460:Generated_Source\PSoC4/ADC.c **** 
 461:Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 535              		.loc 1 461 0 is_stmt 1
 536 002c FB68     		ldr	r3, [r7, #12]
 537 002e 002B     		cmp	r3, #0
 538 0030 02D0     		beq	.L32
 462:Generated_Source\PSoC4/ADC.c ****         {
 463:Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 539              		.loc 1 464 0
 540 0032 044B     		ldr	r3, .L36
 541 0034 0122     		mov	r2, #1
 542 0036 1A60     		str	r2, [r3]
 543              	.L32:
 465:Generated_Source\PSoC4/ADC.c ****         }
 466:Generated_Source\PSoC4/ADC.c ****     }
 467:Generated_Source\PSoC4/ADC.c **** 
 468:Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:Generated_Source\PSoC4/ADC.c ****         {
 471:Generated_Source\PSoC4/ADC.c ****             do
 472:Generated_Source\PSoC4/ADC.c ****             {
 473:Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 474:Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 19


 477:Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/ADC.c ****             {
 479:Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 481:Generated_Source\PSoC4/ADC.c ****             }
 482:Generated_Source\PSoC4/ADC.c ****         }
 483:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/ADC.c **** 
 485:Generated_Source\PSoC4/ADC.c ****     return (status);
 544              		.loc 1 485 0
 545 0038 FB68     		ldr	r3, [r7, #12]
 486:Generated_Source\PSoC4/ADC.c **** }
 546              		.loc 1 486 0
 547 003a 181C     		mov	r0, r3
 548 003c BD46     		mov	sp, r7
 549 003e 04B0     		add	sp, sp, #16
 550              		@ sp needed
 551 0040 80BD     		pop	{r7, pc}
 552              	.L37:
 553 0042 C046     		.align	2
 554              	.L36:
 555 0044 10021A40 		.word	1075446288
 556              		.cfi_endproc
 557              	.LFE6:
 558              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 559              		.section	.text.ADC_GetResult16,"ax",%progbits
 560              		.align	2
 561              		.global	ADC_GetResult16
 562              		.code	16
 563              		.thumb_func
 564              		.type	ADC_GetResult16, %function
 565              	ADC_GetResult16:
 566              	.LFB7:
 487:Generated_Source\PSoC4/ADC.c **** 
 488:Generated_Source\PSoC4/ADC.c **** 
 489:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:Generated_Source\PSoC4/ADC.c **** *
 493:Generated_Source\PSoC4/ADC.c **** * Summary:
 494:Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/ADC.c **** *
 496:Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/ADC.c **** *
 500:Generated_Source\PSoC4/ADC.c **** * Return:
 501:Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/ADC.c **** *
 503:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/ADC.c **** {
 567              		.loc 1 505 0
 568              		.cfi_startproc
 569 0000 80B5     		push	{r7, lr}
 570              		.cfi_def_cfa_offset 8
 571              		.cfi_offset 7, -8
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 20


 572              		.cfi_offset 14, -4
 573 0002 84B0     		sub	sp, sp, #16
 574              		.cfi_def_cfa_offset 24
 575 0004 00AF     		add	r7, sp, #0
 576              		.cfi_def_cfa_register 7
 577 0006 7860     		str	r0, [r7, #4]
 506:Generated_Source\PSoC4/ADC.c ****     uint32 result;
 507:Generated_Source\PSoC4/ADC.c **** 
 508:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 578              		.loc 1 509 0
 579 0008 7B68     		ldr	r3, [r7, #4]
 580 000a 002B     		cmp	r3, #0
 581 000c 02D0     		beq	.L39
 582              		.loc 1 509 0 is_stmt 0 discriminator 1
 583 000e 0020     		mov	r0, #0
 584 0010 FFF7FEFF 		bl	CyHalt
 585              	.L39:
 510:Generated_Source\PSoC4/ADC.c **** 
 511:Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 586              		.loc 1 511 0 is_stmt 1
 587 0014 7B68     		ldr	r3, [r7, #4]
 588 0016 002B     		cmp	r3, #0
 589 0018 09D1     		bne	.L40
 512:Generated_Source\PSoC4/ADC.c ****     {
 513:Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 590              		.loc 1 513 0
 591 001a 7B68     		ldr	r3, [r7, #4]
 592 001c 9B00     		lsl	r3, r3, #2
 593 001e 084A     		ldr	r2, .L43
 594 0020 9446     		mov	ip, r2
 595 0022 6344     		add	r3, r3, ip
 596 0024 1B68     		ldr	r3, [r3]
 597 0026 1B04     		lsl	r3, r3, #16
 598 0028 1B0C     		lsr	r3, r3, #16
 599 002a FB60     		str	r3, [r7, #12]
 600 002c 01E0     		b	.L41
 601              	.L40:
 514:Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:Generated_Source\PSoC4/ADC.c ****     }
 516:Generated_Source\PSoC4/ADC.c ****     else
 517:Generated_Source\PSoC4/ADC.c ****     {
 518:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 520:Generated_Source\PSoC4/ADC.c ****         #else
 521:Generated_Source\PSoC4/ADC.c ****             result = 0u;
 602              		.loc 1 521 0
 603 002e 0023     		mov	r3, #0
 604 0030 FB60     		str	r3, [r7, #12]
 605              	.L41:
 522:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/ADC.c ****     }
 524:Generated_Source\PSoC4/ADC.c **** 
 525:Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 606              		.loc 1 525 0
 607 0032 FB68     		ldr	r3, [r7, #12]
 608 0034 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 21


 609 0036 1BB2     		sxth	r3, r3
 526:Generated_Source\PSoC4/ADC.c **** }
 610              		.loc 1 526 0
 611 0038 181C     		mov	r0, r3
 612 003a BD46     		mov	sp, r7
 613 003c 04B0     		add	sp, sp, #16
 614              		@ sp needed
 615 003e 80BD     		pop	{r7, pc}
 616              	.L44:
 617              		.align	2
 618              	.L43:
 619 0040 80011A40 		.word	1075446144
 620              		.cfi_endproc
 621              	.LFE7:
 622              		.size	ADC_GetResult16, .-ADC_GetResult16
 623              		.section	.text.ADC_SetChanMask,"ax",%progbits
 624              		.align	2
 625              		.global	ADC_SetChanMask
 626              		.code	16
 627              		.thumb_func
 628              		.type	ADC_SetChanMask, %function
 629              	ADC_SetChanMask:
 630              	.LFB8:
 527:Generated_Source\PSoC4/ADC.c **** 
 528:Generated_Source\PSoC4/ADC.c **** 
 529:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 531:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:Generated_Source\PSoC4/ADC.c **** *
 533:Generated_Source\PSoC4/ADC.c **** * Summary:
 534:Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/ADC.c **** *
 536:Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/ADC.c **** *
 545:Generated_Source\PSoC4/ADC.c **** * Return:
 546:Generated_Source\PSoC4/ADC.c **** *  None.
 547:Generated_Source\PSoC4/ADC.c **** *
 548:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/ADC.c **** {
 631              		.loc 1 550 0
 632              		.cfi_startproc
 633 0000 80B5     		push	{r7, lr}
 634              		.cfi_def_cfa_offset 8
 635              		.cfi_offset 7, -8
 636              		.cfi_offset 14, -4
 637 0002 82B0     		sub	sp, sp, #8
 638              		.cfi_def_cfa_offset 16
 639 0004 00AF     		add	r7, sp, #0
 640              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 22


 641 0006 7860     		str	r0, [r7, #4]
 551:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 642              		.loc 1 551 0
 643 0008 034B     		ldr	r3, .L46
 644 000a 7A68     		ldr	r2, [r7, #4]
 645 000c 0121     		mov	r1, #1
 646 000e 0A40     		and	r2, r1
 647 0010 1A60     		str	r2, [r3]
 552:Generated_Source\PSoC4/ADC.c **** }
 648              		.loc 1 552 0
 649 0012 BD46     		mov	sp, r7
 650 0014 02B0     		add	sp, sp, #8
 651              		@ sp needed
 652 0016 80BD     		pop	{r7, pc}
 653              	.L47:
 654              		.align	2
 655              	.L46:
 656 0018 20001A40 		.word	1075445792
 657              		.cfi_endproc
 658              	.LFE8:
 659              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 660              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 661              		.align	2
 662              		.global	ADC_SetLowLimit
 663              		.code	16
 664              		.thumb_func
 665              		.type	ADC_SetLowLimit, %function
 666              	ADC_SetLowLimit:
 667              	.LFB9:
 553:Generated_Source\PSoC4/ADC.c **** 
 554:Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/ADC.c **** 
 556:Generated_Source\PSoC4/ADC.c **** 
 557:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/ADC.c ****     *
 561:Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/ADC.c ****     *
 564:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:Generated_Source\PSoC4/ADC.c ****     *  None.
 566:Generated_Source\PSoC4/ADC.c ****     *
 567:Generated_Source\PSoC4/ADC.c ****     * Return:
 568:Generated_Source\PSoC4/ADC.c ****     *  None.
 569:Generated_Source\PSoC4/ADC.c ****     *
 570:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:Generated_Source\PSoC4/ADC.c ****     {
 573:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/ADC.c ****     }
 575:Generated_Source\PSoC4/ADC.c **** 
 576:Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/ADC.c **** 
 578:Generated_Source\PSoC4/ADC.c **** 
 579:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 23


 581:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:Generated_Source\PSoC4/ADC.c **** *
 583:Generated_Source\PSoC4/ADC.c **** * Summary:
 584:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/ADC.c **** *
 586:Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/ADC.c **** *
 589:Generated_Source\PSoC4/ADC.c **** * Return:
 590:Generated_Source\PSoC4/ADC.c **** *  None.
 591:Generated_Source\PSoC4/ADC.c **** *
 592:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/ADC.c **** {
 668              		.loc 1 594 0
 669              		.cfi_startproc
 670 0000 80B5     		push	{r7, lr}
 671              		.cfi_def_cfa_offset 8
 672              		.cfi_offset 7, -8
 673              		.cfi_offset 14, -4
 674 0002 82B0     		sub	sp, sp, #8
 675              		.cfi_def_cfa_offset 16
 676 0004 00AF     		add	r7, sp, #0
 677              		.cfi_def_cfa_register 7
 678 0006 7860     		str	r0, [r7, #4]
 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 679              		.loc 1 595 0
 680 0008 084B     		ldr	r3, .L49
 681 000a 084A     		ldr	r2, .L49
 682 000c 1268     		ldr	r2, [r2]
 683 000e 120C     		lsr	r2, r2, #16
 684 0010 1204     		lsl	r2, r2, #16
 685 0012 1A60     		str	r2, [r3]
 596:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 686              		.loc 1 596 0
 687 0014 054B     		ldr	r3, .L49
 688 0016 054A     		ldr	r2, .L49
 689 0018 1168     		ldr	r1, [r2]
 690 001a 7A68     		ldr	r2, [r7, #4]
 691 001c 1204     		lsl	r2, r2, #16
 692 001e 120C     		lsr	r2, r2, #16
 693 0020 0A43     		orr	r2, r1
 694 0022 1A60     		str	r2, [r3]
 597:Generated_Source\PSoC4/ADC.c **** }
 695              		.loc 1 597 0
 696 0024 BD46     		mov	sp, r7
 697 0026 02B0     		add	sp, sp, #8
 698              		@ sp needed
 699 0028 80BD     		pop	{r7, pc}
 700              	.L50:
 701 002a C046     		.align	2
 702              	.L49:
 703 002c 18001A40 		.word	1075445784
 704              		.cfi_endproc
 705              	.LFE9:
 706              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 707              		.section	.text.ADC_SetHighLimit,"ax",%progbits
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 24


 708              		.align	2
 709              		.global	ADC_SetHighLimit
 710              		.code	16
 711              		.thumb_func
 712              		.type	ADC_SetHighLimit, %function
 713              	ADC_SetHighLimit:
 714              	.LFB10:
 598:Generated_Source\PSoC4/ADC.c **** 
 599:Generated_Source\PSoC4/ADC.c **** 
 600:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 602:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:Generated_Source\PSoC4/ADC.c **** *
 604:Generated_Source\PSoC4/ADC.c **** * Summary:
 605:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/ADC.c **** *
 607:Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/ADC.c **** *
 610:Generated_Source\PSoC4/ADC.c **** * Return:
 611:Generated_Source\PSoC4/ADC.c **** *  None.
 612:Generated_Source\PSoC4/ADC.c **** *
 613:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/ADC.c **** {
 715              		.loc 1 615 0
 716              		.cfi_startproc
 717 0000 80B5     		push	{r7, lr}
 718              		.cfi_def_cfa_offset 8
 719              		.cfi_offset 7, -8
 720              		.cfi_offset 14, -4
 721 0002 82B0     		sub	sp, sp, #8
 722              		.cfi_def_cfa_offset 16
 723 0004 00AF     		add	r7, sp, #0
 724              		.cfi_def_cfa_register 7
 725 0006 7860     		str	r0, [r7, #4]
 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 726              		.loc 1 616 0
 727 0008 074B     		ldr	r3, .L52
 728 000a 074A     		ldr	r2, .L52
 729 000c 1268     		ldr	r2, [r2]
 730 000e 1204     		lsl	r2, r2, #16
 731 0010 120C     		lsr	r2, r2, #16
 732 0012 1A60     		str	r2, [r3]
 617:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 733              		.loc 1 617 0
 734 0014 044B     		ldr	r3, .L52
 735 0016 044A     		ldr	r2, .L52
 736 0018 1168     		ldr	r1, [r2]
 737 001a 7A68     		ldr	r2, [r7, #4]
 738 001c 1204     		lsl	r2, r2, #16
 739 001e 0A43     		orr	r2, r1
 740 0020 1A60     		str	r2, [r3]
 618:Generated_Source\PSoC4/ADC.c **** }
 741              		.loc 1 618 0
 742 0022 BD46     		mov	sp, r7
 743 0024 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 25


 744              		@ sp needed
 745 0026 80BD     		pop	{r7, pc}
 746              	.L53:
 747              		.align	2
 748              	.L52:
 749 0028 18001A40 		.word	1075445784
 750              		.cfi_endproc
 751              	.LFE10:
 752              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 753              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 754              		.align	2
 755              		.global	ADC_SetLimitMask
 756              		.code	16
 757              		.thumb_func
 758              		.type	ADC_SetLimitMask, %function
 759              	ADC_SetLimitMask:
 760              	.LFB11:
 619:Generated_Source\PSoC4/ADC.c **** 
 620:Generated_Source\PSoC4/ADC.c **** 
 621:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:Generated_Source\PSoC4/ADC.c **** *
 625:Generated_Source\PSoC4/ADC.c **** * Summary:
 626:Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/ADC.c **** *
 628:Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/ADC.c **** *
 634:Generated_Source\PSoC4/ADC.c **** * Return:
 635:Generated_Source\PSoC4/ADC.c **** *  None.
 636:Generated_Source\PSoC4/ADC.c **** *
 637:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/ADC.c **** {
 761              		.loc 1 639 0
 762              		.cfi_startproc
 763 0000 80B5     		push	{r7, lr}
 764              		.cfi_def_cfa_offset 8
 765              		.cfi_offset 7, -8
 766              		.cfi_offset 14, -4
 767 0002 82B0     		sub	sp, sp, #8
 768              		.cfi_def_cfa_offset 16
 769 0004 00AF     		add	r7, sp, #0
 770              		.cfi_def_cfa_register 7
 771 0006 7860     		str	r0, [r7, #4]
 640:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 772              		.loc 1 640 0
 773 0008 034B     		ldr	r3, .L55
 774 000a 7A68     		ldr	r2, [r7, #4]
 775 000c 0121     		mov	r1, #1
 776 000e 0A40     		and	r2, r1
 777 0010 1A60     		str	r2, [r3]
 641:Generated_Source\PSoC4/ADC.c **** }
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 26


 778              		.loc 1 641 0
 779 0012 BD46     		mov	sp, r7
 780 0014 02B0     		add	sp, sp, #8
 781              		@ sp needed
 782 0016 80BD     		pop	{r7, pc}
 783              	.L56:
 784              		.align	2
 785              	.L55:
 786 0018 38021A40 		.word	1075446328
 787              		.cfi_endproc
 788              	.LFE11:
 789              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 790              		.section	.text.ADC_SetSatMask,"ax",%progbits
 791              		.align	2
 792              		.global	ADC_SetSatMask
 793              		.code	16
 794              		.thumb_func
 795              		.type	ADC_SetSatMask, %function
 796              	ADC_SetSatMask:
 797              	.LFB12:
 642:Generated_Source\PSoC4/ADC.c **** 
 643:Generated_Source\PSoC4/ADC.c **** 
 644:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 647:Generated_Source\PSoC4/ADC.c **** *
 648:Generated_Source\PSoC4/ADC.c **** * Summary:
 649:Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/ADC.c **** *
 651:Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/ADC.c **** *
 657:Generated_Source\PSoC4/ADC.c **** * Return:
 658:Generated_Source\PSoC4/ADC.c **** *  None.
 659:Generated_Source\PSoC4/ADC.c **** *
 660:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/ADC.c **** {
 798              		.loc 1 662 0
 799              		.cfi_startproc
 800 0000 80B5     		push	{r7, lr}
 801              		.cfi_def_cfa_offset 8
 802              		.cfi_offset 7, -8
 803              		.cfi_offset 14, -4
 804 0002 82B0     		sub	sp, sp, #8
 805              		.cfi_def_cfa_offset 16
 806 0004 00AF     		add	r7, sp, #0
 807              		.cfi_def_cfa_register 7
 808 0006 7860     		str	r0, [r7, #4]
 663:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 809              		.loc 1 663 0
 810 0008 034B     		ldr	r3, .L58
 811 000a 7A68     		ldr	r2, [r7, #4]
 812 000c 0121     		mov	r1, #1
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 27


 813 000e 0A40     		and	r2, r1
 814 0010 1A60     		str	r2, [r3]
 664:Generated_Source\PSoC4/ADC.c **** }
 815              		.loc 1 664 0
 816 0012 BD46     		mov	sp, r7
 817 0014 02B0     		add	sp, sp, #8
 818              		@ sp needed
 819 0016 80BD     		pop	{r7, pc}
 820              	.L59:
 821              		.align	2
 822              	.L58:
 823 0018 28021A40 		.word	1075446312
 824              		.cfi_endproc
 825              	.LFE12:
 826              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 827              		.section	.text.ADC_SetOffset,"ax",%progbits
 828              		.align	2
 829              		.global	ADC_SetOffset
 830              		.code	16
 831              		.thumb_func
 832              		.type	ADC_SetOffset, %function
 833              	ADC_SetOffset:
 834              	.LFB13:
 665:Generated_Source\PSoC4/ADC.c **** 
 666:Generated_Source\PSoC4/ADC.c **** 
 667:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:Generated_Source\PSoC4/ADC.c **** *
 671:Generated_Source\PSoC4/ADC.c **** * Summary:
 672:Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/ADC.c **** *
 677:Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/ADC.c **** *
 682:Generated_Source\PSoC4/ADC.c **** * Return:
 683:Generated_Source\PSoC4/ADC.c **** *  None.
 684:Generated_Source\PSoC4/ADC.c **** *
 685:Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/ADC.c **** *
 688:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 689:Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/ADC.c **** {
 835              		.loc 1 690 0
 836              		.cfi_startproc
 837 0000 80B5     		push	{r7, lr}
 838              		.cfi_def_cfa_offset 8
 839              		.cfi_offset 7, -8
 840              		.cfi_offset 14, -4
 841 0002 82B0     		sub	sp, sp, #8
 842              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 28


 843 0004 00AF     		add	r7, sp, #0
 844              		.cfi_def_cfa_register 7
 845 0006 7860     		str	r0, [r7, #4]
 846 0008 0A1C     		mov	r2, r1
 847 000a BB1C     		add	r3, r7, #2
 848 000c 1A80     		strh	r2, [r3]
 691:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 849              		.loc 1 692 0
 850 000e 7B68     		ldr	r3, [r7, #4]
 851 0010 002B     		cmp	r3, #0
 852 0012 02D0     		beq	.L61
 853              		.loc 1 692 0 is_stmt 0 discriminator 1
 854 0014 0020     		mov	r0, #0
 855 0016 FFF7FEFF 		bl	CyHalt
 856              	.L61:
 693:Generated_Source\PSoC4/ADC.c **** 
 694:Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 857              		.loc 1 694 0 is_stmt 1
 858 001a 044B     		ldr	r3, .L62
 859 001c 7A68     		ldr	r2, [r7, #4]
 860 001e 5200     		lsl	r2, r2, #1
 861 0020 B91C     		add	r1, r7, #2
 862 0022 0988     		ldrh	r1, [r1]
 863 0024 D152     		strh	r1, [r2, r3]
 695:Generated_Source\PSoC4/ADC.c **** }
 864              		.loc 1 695 0
 865 0026 BD46     		mov	sp, r7
 866 0028 02B0     		add	sp, sp, #8
 867              		@ sp needed
 868 002a 80BD     		pop	{r7, pc}
 869              	.L63:
 870              		.align	2
 871              	.L62:
 872 002c 00000000 		.word	ADC_offset
 873              		.cfi_endproc
 874              	.LFE13:
 875              		.size	ADC_SetOffset, .-ADC_SetOffset
 876              		.section	.text.ADC_SetGain,"ax",%progbits
 877              		.align	2
 878              		.global	ADC_SetGain
 879              		.code	16
 880              		.thumb_func
 881              		.type	ADC_SetGain, %function
 882              	ADC_SetGain:
 883              	.LFB14:
 696:Generated_Source\PSoC4/ADC.c **** 
 697:Generated_Source\PSoC4/ADC.c **** 
 698:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:Generated_Source\PSoC4/ADC.c **** *
 702:Generated_Source\PSoC4/ADC.c **** * Summary:
 703:Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 29


 707:Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/ADC.c **** *
 711:Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 713:Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/ADC.c **** *
 715:Generated_Source\PSoC4/ADC.c **** * Return:
 716:Generated_Source\PSoC4/ADC.c **** *  None.
 717:Generated_Source\PSoC4/ADC.c **** *
 718:Generated_Source\PSoC4/ADC.c **** * Global variables:
 719:Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/ADC.c **** *
 722:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/ADC.c **** {
 884              		.loc 1 724 0
 885              		.cfi_startproc
 886 0000 80B5     		push	{r7, lr}
 887              		.cfi_def_cfa_offset 8
 888              		.cfi_offset 7, -8
 889              		.cfi_offset 14, -4
 890 0002 82B0     		sub	sp, sp, #8
 891              		.cfi_def_cfa_offset 16
 892 0004 00AF     		add	r7, sp, #0
 893              		.cfi_def_cfa_register 7
 894 0006 7860     		str	r0, [r7, #4]
 895 0008 3960     		str	r1, [r7]
 725:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 896              		.loc 1 726 0
 897 000a 7B68     		ldr	r3, [r7, #4]
 898 000c 002B     		cmp	r3, #0
 899 000e 02D0     		beq	.L65
 900              		.loc 1 726 0 is_stmt 0 discriminator 1
 901 0010 0020     		mov	r0, #0
 902 0012 FFF7FEFF 		bl	CyHalt
 903              	.L65:
 727:Generated_Source\PSoC4/ADC.c **** 
 728:Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 904              		.loc 1 728 0 is_stmt 1
 905 0016 044B     		ldr	r3, .L66
 906 0018 7A68     		ldr	r2, [r7, #4]
 907 001a 9200     		lsl	r2, r2, #2
 908 001c 3968     		ldr	r1, [r7]
 909 001e D150     		str	r1, [r2, r3]
 729:Generated_Source\PSoC4/ADC.c **** }
 910              		.loc 1 729 0
 911 0020 BD46     		mov	sp, r7
 912 0022 02B0     		add	sp, sp, #8
 913              		@ sp needed
 914 0024 80BD     		pop	{r7, pc}
 915              	.L67:
 916 0026 C046     		.align	2
 917              	.L66:
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 30


 918 0028 00000000 		.word	ADC_countsPer10Volt
 919              		.cfi_endproc
 920              	.LFE14:
 921              		.size	ADC_SetGain, .-ADC_SetGain
 922              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 923              		.align	2
 924              		.global	ADC_CountsTo_mVolts
 925              		.code	16
 926              		.thumb_func
 927              		.type	ADC_CountsTo_mVolts, %function
 928              	ADC_CountsTo_mVolts:
 929              	.LFB15:
 730:Generated_Source\PSoC4/ADC.c **** 
 731:Generated_Source\PSoC4/ADC.c **** 
 732:Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 733:Generated_Source\PSoC4/ADC.c **** 
 734:Generated_Source\PSoC4/ADC.c **** 
 735:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/ADC.c ****     *
 739:Generated_Source\PSoC4/ADC.c ****     * Summary:
 740:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/ADC.c ****     *
 743:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/ADC.c ****     *
 747:Generated_Source\PSoC4/ADC.c ****     * Return:
 748:Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/ADC.c ****     *
 750:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/ADC.c ****     *
 755:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/ADC.c ****     {
 930              		.loc 1 757 0
 931              		.cfi_startproc
 932 0000 80B5     		push	{r7, lr}
 933              		.cfi_def_cfa_offset 8
 934              		.cfi_offset 7, -8
 935              		.cfi_offset 14, -4
 936 0002 84B0     		sub	sp, sp, #16
 937              		.cfi_def_cfa_offset 24
 938 0004 00AF     		add	r7, sp, #0
 939              		.cfi_def_cfa_register 7
 940 0006 7860     		str	r0, [r7, #4]
 941 0008 0A1C     		mov	r2, r1
 942 000a BB1C     		add	r3, r7, #2
 943 000c 1A80     		strh	r2, [r3]
 758:Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/ADC.c **** 
 760:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 31


 761:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 944              		.loc 1 761 0
 945 000e 7B68     		ldr	r3, [r7, #4]
 946 0010 002B     		cmp	r3, #0
 947 0012 02D0     		beq	.L69
 948              		.loc 1 761 0 is_stmt 0 discriminator 1
 949 0014 0020     		mov	r0, #0
 950 0016 FFF7FEFF 		bl	CyHalt
 951              	.L69:
 762:Generated_Source\PSoC4/ADC.c **** 
 763:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 766:Generated_Source\PSoC4/ADC.c ****             {
 767:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/ADC.c ****             }
 769:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 770:Generated_Source\PSoC4/ADC.c **** 
 771:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 952              		.loc 1 772 0 is_stmt 1
 953 001a 1F4B     		ldr	r3, .L75
 954 001c 7A68     		ldr	r2, [r7, #4]
 955 001e 5200     		lsl	r2, r2, #1
 956 0020 D35A     		ldrh	r3, [r2, r3]
 957 0022 99B2     		uxth	r1, r3
 958 0024 BB1C     		add	r3, r7, #2
 959 0026 1A88     		ldrh	r2, [r3]
 960 0028 8BB2     		uxth	r3, r1
 961 002a D31A     		sub	r3, r2, r3
 962 002c 9AB2     		uxth	r2, r3
 963 002e BB1C     		add	r3, r7, #2
 964 0030 1A80     		strh	r2, [r3]
 773:Generated_Source\PSoC4/ADC.c **** 
 774:Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 965              		.loc 1 774 0
 966 0032 BB1C     		add	r3, r7, #2
 967 0034 0022     		mov	r2, #0
 968 0036 9B5E     		ldrsh	r3, [r3, r2]
 969 0038 184A     		ldr	r2, .L75+4
 970 003a 5A43     		mul	r2, r3
 775:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 971              		.loc 1 775 0
 972 003c BB1C     		add	r3, r7, #2
 973 003e 0021     		mov	r1, #0
 974 0040 5B5E     		ldrsh	r3, [r3, r1]
 975 0042 002B     		cmp	r3, #0
 976 0044 08DD     		ble	.L70
 977              		.loc 1 775 0 is_stmt 0 discriminator 1
 978 0046 164B     		ldr	r3, .L75+8
 979 0048 7968     		ldr	r1, [r7, #4]
 980 004a 8900     		lsl	r1, r1, #2
 981 004c CB58     		ldr	r3, [r1, r3]
 982 004e 002B     		cmp	r3, #0
 983 0050 00DA     		bge	.L71
 984 0052 0133     		add	r3, r3, #1
 985              	.L71:
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 32


 986 0054 5B10     		asr	r3, r3, #1
 987 0056 08E0     		b	.L72
 988              	.L70:
 989              		.loc 1 775 0 discriminator 2
 990 0058 114B     		ldr	r3, .L75+8
 991 005a 7968     		ldr	r1, [r7, #4]
 992 005c 8900     		lsl	r1, r1, #2
 993 005e CB58     		ldr	r3, [r1, r3]
 994 0060 002B     		cmp	r3, #0
 995 0062 00DA     		bge	.L73
 996 0064 0133     		add	r3, r3, #1
 997              	.L73:
 998 0066 5B10     		asr	r3, r3, #1
 999 0068 5B42     		neg	r3, r3
 1000              	.L72:
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1001              		.loc 1 774 0 is_stmt 1
 1002 006a D118     		add	r1, r2, r3
 776:Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1003              		.loc 1 776 0
 1004 006c 0C4B     		ldr	r3, .L75+8
 1005 006e 7A68     		ldr	r2, [r7, #4]
 1006 0070 9200     		lsl	r2, r2, #2
 1007 0072 D358     		ldr	r3, [r2, r3]
 1008 0074 081C     		mov	r0, r1
 1009 0076 191C     		mov	r1, r3
 1010 0078 FFF7FEFF 		bl	__aeabi_idiv
 1011 007c 031C     		mov	r3, r0
 1012 007e 1A1C     		mov	r2, r3
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1013              		.loc 1 774 0
 1014 0080 0E23     		mov	r3, #14
 1015 0082 FB18     		add	r3, r7, r3
 1016 0084 1A80     		strh	r2, [r3]
 777:Generated_Source\PSoC4/ADC.c **** 
 778:Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1017              		.loc 1 778 0
 1018 0086 0E23     		mov	r3, #14
 1019 0088 FB18     		add	r3, r7, r3
 1020 008a 1B88     		ldrh	r3, [r3]
 1021 008c 1BB2     		sxth	r3, r3
 779:Generated_Source\PSoC4/ADC.c ****     }
 1022              		.loc 1 779 0
 1023 008e 181C     		mov	r0, r3
 1024 0090 BD46     		mov	sp, r7
 1025 0092 04B0     		add	sp, sp, #16
 1026              		@ sp needed
 1027 0094 80BD     		pop	{r7, pc}
 1028              	.L76:
 1029 0096 C046     		.align	2
 1030              	.L75:
 1031 0098 00000000 		.word	ADC_offset
 1032 009c 10270000 		.word	10000
 1033 00a0 00000000 		.word	ADC_countsPer10Volt
 1034              		.cfi_endproc
 1035              	.LFE15:
 1036              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 33


 1037              		.global	__aeabi_lmul
 1038              		.global	__aeabi_ldivmod
 1039              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1040              		.align	2
 1041              		.global	ADC_CountsTo_uVolts
 1042              		.code	16
 1043              		.thumb_func
 1044              		.type	ADC_CountsTo_uVolts, %function
 1045              	ADC_CountsTo_uVolts:
 1046              	.LFB16:
 780:Generated_Source\PSoC4/ADC.c **** 
 781:Generated_Source\PSoC4/ADC.c **** 
 782:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 784:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/ADC.c ****     *
 786:Generated_Source\PSoC4/ADC.c ****     * Summary:
 787:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/ADC.c ****     *
 790:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/ADC.c ****     *
 794:Generated_Source\PSoC4/ADC.c ****     * Return:
 795:Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/ADC.c ****     *
 797:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/ADC.c ****     *
 802:Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/ADC.c ****     *
 809:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/ADC.c ****     {
 1047              		.loc 1 811 0
 1048              		.cfi_startproc
 1049 0000 B0B5     		push	{r4, r5, r7, lr}
 1050              		.cfi_def_cfa_offset 16
 1051              		.cfi_offset 4, -16
 1052              		.cfi_offset 5, -12
 1053              		.cfi_offset 7, -8
 1054              		.cfi_offset 14, -4
 1055 0002 86B0     		sub	sp, sp, #24
 1056              		.cfi_def_cfa_offset 40
 1057 0004 00AF     		add	r7, sp, #0
 1058              		.cfi_def_cfa_register 7
 1059 0006 F860     		str	r0, [r7, #12]
 1060 0008 0A1C     		mov	r2, r1
 1061 000a 0A23     		mov	r3, #10
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 34


 1062 000c FB18     		add	r3, r7, r3
 1063 000e 1A80     		strh	r2, [r3]
 812:Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 813:Generated_Source\PSoC4/ADC.c **** 
 814:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1064              		.loc 1 815 0
 1065 0010 FB68     		ldr	r3, [r7, #12]
 1066 0012 002B     		cmp	r3, #0
 1067 0014 02D0     		beq	.L78
 1068              		.loc 1 815 0 is_stmt 0 discriminator 1
 1069 0016 0020     		mov	r0, #0
 1070 0018 FFF7FEFF 		bl	CyHalt
 1071              	.L78:
 816:Generated_Source\PSoC4/ADC.c **** 
 817:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 819:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/ADC.c ****             {
 821:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/ADC.c ****             }
 823:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:Generated_Source\PSoC4/ADC.c **** 
 825:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1072              		.loc 1 826 0 is_stmt 1
 1073 001c 194B     		ldr	r3, .L80
 1074 001e FA68     		ldr	r2, [r7, #12]
 1075 0020 5200     		lsl	r2, r2, #1
 1076 0022 D35A     		ldrh	r3, [r2, r3]
 1077 0024 99B2     		uxth	r1, r3
 1078 0026 0A23     		mov	r3, #10
 1079 0028 FB18     		add	r3, r7, r3
 1080 002a 1A88     		ldrh	r2, [r3]
 1081 002c 8BB2     		uxth	r3, r1
 1082 002e D31A     		sub	r3, r2, r3
 1083 0030 9AB2     		uxth	r2, r3
 1084 0032 0A23     		mov	r3, #10
 1085 0034 FB18     		add	r3, r7, r3
 1086 0036 1A80     		strh	r2, [r3]
 827:Generated_Source\PSoC4/ADC.c **** 
 828:Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1087              		.loc 1 828 0
 1088 0038 0A23     		mov	r3, #10
 1089 003a FB18     		add	r3, r7, r3
 1090 003c 1B88     		ldrh	r3, [r3]
 1091 003e 1BB2     		sxth	r3, r3
 1092 0040 3B60     		str	r3, [r7]
 1093 0042 DB17     		asr	r3, r3, #31
 1094 0044 7B60     		str	r3, [r7, #4]
 1095 0046 3868     		ldr	r0, [r7]
 1096 0048 7968     		ldr	r1, [r7, #4]
 1097 004a 0F4A     		ldr	r2, .L80+4
 1098 004c 0023     		mov	r3, #0
 1099 004e FFF7FEFF 		bl	__aeabi_lmul
 1100 0052 021C     		mov	r2, r0
 1101 0054 0B1C     		mov	r3, r1
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 35


 1102 0056 101C     		mov	r0, r2
 1103 0058 191C     		mov	r1, r3
 1104 005a 0C4B     		ldr	r3, .L80+8
 1105 005c FA68     		ldr	r2, [r7, #12]
 1106 005e 9200     		lsl	r2, r2, #2
 1107 0060 D358     		ldr	r3, [r2, r3]
 1108 0062 1C1C     		mov	r4, r3
 1109 0064 DB17     		asr	r3, r3, #31
 1110 0066 1D1C     		mov	r5, r3
 1111 0068 221C     		mov	r2, r4
 1112 006a 2B1C     		mov	r3, r5
 1113 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1114 0070 031C     		mov	r3, r0
 1115 0072 0C1C     		mov	r4, r1
 1116 0074 3B61     		str	r3, [r7, #16]
 1117 0076 7C61     		str	r4, [r7, #20]
 829:Generated_Source\PSoC4/ADC.c **** 
 830:Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1118              		.loc 1 830 0
 1119 0078 3B69     		ldr	r3, [r7, #16]
 831:Generated_Source\PSoC4/ADC.c ****     }
 1120              		.loc 1 831 0
 1121 007a 181C     		mov	r0, r3
 1122 007c BD46     		mov	sp, r7
 1123 007e 06B0     		add	sp, sp, #24
 1124              		@ sp needed
 1125 0080 B0BD     		pop	{r4, r5, r7, pc}
 1126              	.L81:
 1127 0082 C046     		.align	2
 1128              	.L80:
 1129 0084 00000000 		.word	ADC_offset
 1130 0088 80969800 		.word	10000000
 1131 008c 00000000 		.word	ADC_countsPer10Volt
 1132              		.cfi_endproc
 1133              	.LFE16:
 1134              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1135              		.global	__aeabi_i2f
 1136              		.global	__aeabi_fmul
 1137              		.global	__aeabi_fdiv
 1138              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1139              		.align	2
 1140              		.global	ADC_CountsTo_Volts
 1141              		.code	16
 1142              		.thumb_func
 1143              		.type	ADC_CountsTo_Volts, %function
 1144              	ADC_CountsTo_Volts:
 1145              	.LFB17:
 832:Generated_Source\PSoC4/ADC.c **** 
 833:Generated_Source\PSoC4/ADC.c **** 
 834:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/ADC.c ****     *
 838:Generated_Source\PSoC4/ADC.c ****     * Summary:
 839:Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/ADC.c ****     *
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 36


 842:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 845:Generated_Source\PSoC4/ADC.c ****     *
 846:Generated_Source\PSoC4/ADC.c ****     * Return:
 847:Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/ADC.c ****     *
 849:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 851:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/ADC.c ****     *
 854:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/ADC.c ****     {
 1146              		.loc 1 856 0
 1147              		.cfi_startproc
 1148 0000 90B5     		push	{r4, r7, lr}
 1149              		.cfi_def_cfa_offset 12
 1150              		.cfi_offset 4, -12
 1151              		.cfi_offset 7, -8
 1152              		.cfi_offset 14, -4
 1153 0002 85B0     		sub	sp, sp, #20
 1154              		.cfi_def_cfa_offset 32
 1155 0004 00AF     		add	r7, sp, #0
 1156              		.cfi_def_cfa_register 7
 1157 0006 7860     		str	r0, [r7, #4]
 1158 0008 0A1C     		mov	r2, r1
 1159 000a BB1C     		add	r3, r7, #2
 1160 000c 1A80     		strh	r2, [r3]
 857:Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:Generated_Source\PSoC4/ADC.c **** 
 859:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1161              		.loc 1 860 0
 1162 000e 7B68     		ldr	r3, [r7, #4]
 1163 0010 002B     		cmp	r3, #0
 1164 0012 02D0     		beq	.L83
 1165              		.loc 1 860 0 is_stmt 0 discriminator 1
 1166 0014 0020     		mov	r0, #0
 1167 0016 FFF7FEFF 		bl	CyHalt
 1168              	.L83:
 861:Generated_Source\PSoC4/ADC.c **** 
 862:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/ADC.c ****             {
 866:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/ADC.c ****             }
 868:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:Generated_Source\PSoC4/ADC.c **** 
 870:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1169              		.loc 1 871 0 is_stmt 1
 1170 001a 164B     		ldr	r3, .L85
 1171 001c 7A68     		ldr	r2, [r7, #4]
 1172 001e 5200     		lsl	r2, r2, #1
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 37


 1173 0020 D35A     		ldrh	r3, [r2, r3]
 1174 0022 99B2     		uxth	r1, r3
 1175 0024 BB1C     		add	r3, r7, #2
 1176 0026 1A88     		ldrh	r2, [r3]
 1177 0028 8BB2     		uxth	r3, r1
 1178 002a D31A     		sub	r3, r2, r3
 1179 002c 9AB2     		uxth	r2, r3
 1180 002e BB1C     		add	r3, r7, #2
 1181 0030 1A80     		strh	r2, [r3]
 872:Generated_Source\PSoC4/ADC.c **** 
 873:Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1182              		.loc 1 873 0
 1183 0032 BB1C     		add	r3, r7, #2
 1184 0034 0022     		mov	r2, #0
 1185 0036 9B5E     		ldrsh	r3, [r3, r2]
 1186 0038 181C     		mov	r0, r3
 1187 003a FFF7FEFF 		bl	__aeabi_i2f
 1188 003e 031C     		add	r3, r0, #0
 1189 0040 181C     		add	r0, r3, #0
 1190 0042 0D49     		ldr	r1, .L85+4
 1191 0044 FFF7FEFF 		bl	__aeabi_fmul
 1192 0048 031C     		add	r3, r0, #0
 1193 004a 1C1C     		add	r4, r3, #0
 1194 004c 0B4B     		ldr	r3, .L85+8
 1195 004e 7A68     		ldr	r2, [r7, #4]
 1196 0050 9200     		lsl	r2, r2, #2
 1197 0052 D358     		ldr	r3, [r2, r3]
 1198 0054 181C     		mov	r0, r3
 1199 0056 FFF7FEFF 		bl	__aeabi_i2f
 1200 005a 031C     		add	r3, r0, #0
 1201 005c 201C     		add	r0, r4, #0
 1202 005e 191C     		add	r1, r3, #0
 1203 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1204 0064 031C     		add	r3, r0, #0
 1205 0066 FB60     		str	r3, [r7, #12]
 874:Generated_Source\PSoC4/ADC.c **** 
 875:Generated_Source\PSoC4/ADC.c ****         return( volts );
 1206              		.loc 1 875 0
 1207 0068 FB68     		ldr	r3, [r7, #12]
 876:Generated_Source\PSoC4/ADC.c ****     }
 1208              		.loc 1 876 0
 1209 006a 181C     		add	r0, r3, #0
 1210 006c BD46     		mov	sp, r7
 1211 006e 05B0     		add	sp, sp, #20
 1212              		@ sp needed
 1213 0070 90BD     		pop	{r4, r7, pc}
 1214              	.L86:
 1215 0072 C046     		.align	2
 1216              	.L85:
 1217 0074 00000000 		.word	ADC_offset
 1218 0078 00002041 		.word	1092616192
 1219 007c 00000000 		.word	ADC_countsPer10Volt
 1220              		.cfi_endproc
 1221              	.LFE17:
 1222              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1223              		.text
 1224              	.Letext0:
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 38


 1225              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1226              		.section	.debug_info,"",%progbits
 1227              	.Ldebug_info0:
 1228 0000 77040000 		.4byte	0x477
 1229 0004 0400     		.2byte	0x4
 1230 0006 00000000 		.4byte	.Ldebug_abbrev0
 1231 000a 04       		.byte	0x4
 1232 000b 01       		.uleb128 0x1
 1233 000c 27000000 		.4byte	.LASF59
 1234 0010 01       		.byte	0x1
 1235 0011 FD020000 		.4byte	.LASF60
 1236 0015 8F010000 		.4byte	.LASF61
 1237 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1238 001d 00000000 		.4byte	0
 1239 0021 00000000 		.4byte	.Ldebug_line0
 1240 0025 02       		.uleb128 0x2
 1241 0026 01       		.byte	0x1
 1242 0027 06       		.byte	0x6
 1243 0028 65030000 		.4byte	.LASF0
 1244 002c 02       		.uleb128 0x2
 1245 002d 01       		.byte	0x1
 1246 002e 08       		.byte	0x8
 1247 002f 52010000 		.4byte	.LASF1
 1248 0033 02       		.uleb128 0x2
 1249 0034 02       		.byte	0x2
 1250 0035 05       		.byte	0x5
 1251 0036 FA000000 		.4byte	.LASF2
 1252 003a 02       		.uleb128 0x2
 1253 003b 02       		.byte	0x2
 1254 003c 07       		.byte	0x7
 1255 003d E7000000 		.4byte	.LASF3
 1256 0041 02       		.uleb128 0x2
 1257 0042 04       		.byte	0x4
 1258 0043 05       		.byte	0x5
 1259 0044 57030000 		.4byte	.LASF4
 1260 0048 02       		.uleb128 0x2
 1261 0049 04       		.byte	0x4
 1262 004a 07       		.byte	0x7
 1263 004b 77010000 		.4byte	.LASF5
 1264 004f 02       		.uleb128 0x2
 1265 0050 08       		.byte	0x8
 1266 0051 05       		.byte	0x5
 1267 0052 00000000 		.4byte	.LASF6
 1268 0056 02       		.uleb128 0x2
 1269 0057 08       		.byte	0x8
 1270 0058 07       		.byte	0x7
 1271 0059 79020000 		.4byte	.LASF7
 1272 005d 03       		.uleb128 0x3
 1273 005e 04       		.byte	0x4
 1274 005f 05       		.byte	0x5
 1275 0060 696E7400 		.ascii	"int\000"
 1276 0064 02       		.uleb128 0x2
 1277 0065 04       		.byte	0x4
 1278 0066 07       		.byte	0x7
 1279 0067 5A020000 		.4byte	.LASF8
 1280 006b 04       		.uleb128 0x4
 1281 006c 3D030000 		.4byte	.LASF9
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 39


 1282 0070 02       		.byte	0x2
 1283 0071 B901     		.2byte	0x1b9
 1284 0073 2C000000 		.4byte	0x2c
 1285 0077 04       		.uleb128 0x4
 1286 0078 31020000 		.4byte	.LASF10
 1287 007c 02       		.byte	0x2
 1288 007d BA01     		.2byte	0x1ba
 1289 007f 3A000000 		.4byte	0x3a
 1290 0083 04       		.uleb128 0x4
 1291 0084 42020000 		.4byte	.LASF11
 1292 0088 02       		.byte	0x2
 1293 0089 BB01     		.2byte	0x1bb
 1294 008b 48000000 		.4byte	0x48
 1295 008f 04       		.uleb128 0x4
 1296 0090 71010000 		.4byte	.LASF12
 1297 0094 02       		.byte	0x2
 1298 0095 BD01     		.2byte	0x1bd
 1299 0097 33000000 		.4byte	0x33
 1300 009b 04       		.uleb128 0x4
 1301 009c 89010000 		.4byte	.LASF13
 1302 00a0 02       		.byte	0x2
 1303 00a1 BE01     		.2byte	0x1be
 1304 00a3 41000000 		.4byte	0x41
 1305 00a7 04       		.uleb128 0x4
 1306 00a8 29010000 		.4byte	.LASF14
 1307 00ac 02       		.byte	0x2
 1308 00ad BF01     		.2byte	0x1bf
 1309 00af B3000000 		.4byte	0xb3
 1310 00b3 02       		.uleb128 0x2
 1311 00b4 04       		.byte	0x4
 1312 00b5 04       		.byte	0x4
 1313 00b6 BC000000 		.4byte	.LASF15
 1314 00ba 02       		.uleb128 0x2
 1315 00bb 08       		.byte	0x8
 1316 00bc 04       		.byte	0x4
 1317 00bd 19020000 		.4byte	.LASF16
 1318 00c1 04       		.uleb128 0x4
 1319 00c2 7D030000 		.4byte	.LASF17
 1320 00c6 02       		.byte	0x2
 1321 00c7 C401     		.2byte	0x1c4
 1322 00c9 4F000000 		.4byte	0x4f
 1323 00cd 02       		.uleb128 0x2
 1324 00ce 01       		.byte	0x1
 1325 00cf 08       		.byte	0x8
 1326 00d0 60030000 		.4byte	.LASF18
 1327 00d4 04       		.uleb128 0x4
 1328 00d5 21000000 		.4byte	.LASF19
 1329 00d9 02       		.byte	0x2
 1330 00da 6502     		.2byte	0x265
 1331 00dc E0000000 		.4byte	0xe0
 1332 00e0 05       		.uleb128 0x5
 1333 00e1 83000000 		.4byte	0x83
 1334 00e5 02       		.uleb128 0x2
 1335 00e6 04       		.byte	0x4
 1336 00e7 07       		.byte	0x7
 1337 00e8 BC020000 		.4byte	.LASF20
 1338 00ec 06       		.uleb128 0x6
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 40


 1339 00ed 97020000 		.4byte	.LASF24
 1340 00f1 01       		.byte	0x1
 1341 00f2 3F       		.byte	0x3f
 1342 00f3 00000000 		.4byte	.LFB0
 1343 00f7 24000000 		.4byte	.LFE0-.LFB0
 1344 00fb 01       		.uleb128 0x1
 1345 00fc 9C       		.byte	0x9c
 1346 00fd 07       		.uleb128 0x7
 1347 00fe A1020000 		.4byte	.LASF35
 1348 0102 01       		.byte	0x1
 1349 0103 5E       		.byte	0x5e
 1350 0104 00000000 		.4byte	.LFB1
 1351 0108 C4010000 		.4byte	.LFE1-.LFB1
 1352 010c 01       		.uleb128 0x1
 1353 010d 9C       		.byte	0x9c
 1354 010e 3D010000 		.4byte	0x13d
 1355 0112 08       		.uleb128 0x8
 1356 0113 1F030000 		.4byte	.LASF21
 1357 0117 01       		.byte	0x1
 1358 0118 60       		.byte	0x60
 1359 0119 83000000 		.4byte	0x83
 1360 011d 02       		.uleb128 0x2
 1361 011e 91       		.byte	0x91
 1362 011f 74       		.sleb128 -12
 1363 0120 08       		.uleb128 0x8
 1364 0121 3C010000 		.4byte	.LASF22
 1365 0125 01       		.byte	0x1
 1366 0126 61       		.byte	0x61
 1367 0127 83000000 		.4byte	0x83
 1368 012b 02       		.uleb128 0x2
 1369 012c 91       		.byte	0x91
 1370 012d 6C       		.sleb128 -20
 1371 012e 08       		.uleb128 0x8
 1372 012f 72020000 		.4byte	.LASF23
 1373 0133 01       		.byte	0x1
 1374 0134 62       		.byte	0x62
 1375 0135 9B000000 		.4byte	0x9b
 1376 0139 02       		.uleb128 0x2
 1377 013a 91       		.byte	0x91
 1378 013b 70       		.sleb128 -16
 1379 013c 00       		.byte	0
 1380 013d 09       		.uleb128 0x9
 1381 013e 67020000 		.4byte	.LASF25
 1382 0142 01       		.byte	0x1
 1383 0143 4A01     		.2byte	0x14a
 1384 0145 00000000 		.4byte	.LFB2
 1385 0149 28000000 		.4byte	.LFE2-.LFB2
 1386 014d 01       		.uleb128 0x1
 1387 014e 9C       		.byte	0x9c
 1388 014f 0A       		.uleb128 0xa
 1389 0150 83030000 		.4byte	.LASF26
 1390 0154 01       		.byte	0x1
 1391 0155 6D01     		.2byte	0x16d
 1392 0157 00000000 		.4byte	.LFB3
 1393 015b 18000000 		.4byte	.LFE3-.LFB3
 1394 015f 01       		.uleb128 0x1
 1395 0160 9C       		.byte	0x9c
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 41


 1396 0161 0A       		.uleb128 0xa
 1397 0162 EC020000 		.4byte	.LASF27
 1398 0166 01       		.byte	0x1
 1399 0167 8701     		.2byte	0x187
 1400 0169 00000000 		.4byte	.LFB4
 1401 016d 1C000000 		.4byte	.LFE4-.LFB4
 1402 0171 01       		.uleb128 0x1
 1403 0172 9C       		.byte	0x9c
 1404 0173 0A       		.uleb128 0xa
 1405 0174 2D030000 		.4byte	.LASF28
 1406 0178 01       		.byte	0x1
 1407 0179 A001     		.2byte	0x1a0
 1408 017b 00000000 		.4byte	.LFB5
 1409 017f 1C000000 		.4byte	.LFE5-.LFB5
 1410 0183 01       		.uleb128 0x1
 1411 0184 9C       		.byte	0x9c
 1412 0185 0B       		.uleb128 0xb
 1413 0186 05020000 		.4byte	.LASF30
 1414 018a 01       		.byte	0x1
 1415 018b C201     		.2byte	0x1c2
 1416 018d 83000000 		.4byte	0x83
 1417 0191 00000000 		.4byte	.LFB6
 1418 0195 48000000 		.4byte	.LFE6-.LFB6
 1419 0199 01       		.uleb128 0x1
 1420 019a 9C       		.byte	0x9c
 1421 019b BE010000 		.4byte	0x1be
 1422 019f 0C       		.uleb128 0xc
 1423 01a0 25030000 		.4byte	.LASF32
 1424 01a4 01       		.byte	0x1
 1425 01a5 C201     		.2byte	0x1c2
 1426 01a7 83000000 		.4byte	0x83
 1427 01ab 02       		.uleb128 0x2
 1428 01ac 91       		.byte	0x91
 1429 01ad 6C       		.sleb128 -20
 1430 01ae 0D       		.uleb128 0xd
 1431 01af 22010000 		.4byte	.LASF29
 1432 01b3 01       		.byte	0x1
 1433 01b4 C401     		.2byte	0x1c4
 1434 01b6 83000000 		.4byte	0x83
 1435 01ba 02       		.uleb128 0x2
 1436 01bb 91       		.byte	0x91
 1437 01bc 74       		.sleb128 -12
 1438 01bd 00       		.byte	0
 1439 01be 0E       		.uleb128 0xe
 1440 01bf D6010000 		.4byte	.LASF31
 1441 01c3 01       		.byte	0x1
 1442 01c4 F801     		.2byte	0x1f8
 1443 01c6 8F000000 		.4byte	0x8f
 1444 01ca 00000000 		.4byte	.LFB7
 1445 01ce 44000000 		.4byte	.LFE7-.LFB7
 1446 01d2 01       		.uleb128 0x1
 1447 01d3 9C       		.byte	0x9c
 1448 01d4 F7010000 		.4byte	0x1f7
 1449 01d8 0C       		.uleb128 0xc
 1450 01d9 B0020000 		.4byte	.LASF33
 1451 01dd 01       		.byte	0x1
 1452 01de F801     		.2byte	0x1f8
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 42


 1453 01e0 83000000 		.4byte	0x83
 1454 01e4 02       		.uleb128 0x2
 1455 01e5 91       		.byte	0x91
 1456 01e6 6C       		.sleb128 -20
 1457 01e7 0D       		.uleb128 0xd
 1458 01e8 90020000 		.4byte	.LASF34
 1459 01ec 01       		.byte	0x1
 1460 01ed FA01     		.2byte	0x1fa
 1461 01ef 83000000 		.4byte	0x83
 1462 01f3 02       		.uleb128 0x2
 1463 01f4 91       		.byte	0x91
 1464 01f5 74       		.sleb128 -12
 1465 01f6 00       		.byte	0
 1466 01f7 0F       		.uleb128 0xf
 1467 01f8 E6010000 		.4byte	.LASF36
 1468 01fc 01       		.byte	0x1
 1469 01fd 2502     		.2byte	0x225
 1470 01ff 00000000 		.4byte	.LFB8
 1471 0203 1C000000 		.4byte	.LFE8-.LFB8
 1472 0207 01       		.uleb128 0x1
 1473 0208 9C       		.byte	0x9c
 1474 0209 1D020000 		.4byte	0x21d
 1475 020d 0C       		.uleb128 0xc
 1476 020e 1A030000 		.4byte	.LASF37
 1477 0212 01       		.byte	0x1
 1478 0213 2502     		.2byte	0x225
 1479 0215 83000000 		.4byte	0x83
 1480 0219 02       		.uleb128 0x2
 1481 021a 91       		.byte	0x91
 1482 021b 74       		.sleb128 -12
 1483 021c 00       		.byte	0
 1484 021d 0F       		.uleb128 0xf
 1485 021e 12010000 		.4byte	.LASF38
 1486 0222 01       		.byte	0x1
 1487 0223 5102     		.2byte	0x251
 1488 0225 00000000 		.4byte	.LFB9
 1489 0229 30000000 		.4byte	.LFE9-.LFB9
 1490 022d 01       		.uleb128 0x1
 1491 022e 9C       		.byte	0x9c
 1492 022f 43020000 		.4byte	0x243
 1493 0233 0C       		.uleb128 0xc
 1494 0234 20020000 		.4byte	.LASF39
 1495 0238 01       		.byte	0x1
 1496 0239 5102     		.2byte	0x251
 1497 023b 83000000 		.4byte	0x83
 1498 023f 02       		.uleb128 0x2
 1499 0240 91       		.byte	0x91
 1500 0241 74       		.sleb128 -12
 1501 0242 00       		.byte	0
 1502 0243 0F       		.uleb128 0xf
 1503 0244 60010000 		.4byte	.LASF40
 1504 0248 01       		.byte	0x1
 1505 0249 6602     		.2byte	0x266
 1506 024b 00000000 		.4byte	.LFB10
 1507 024f 2C000000 		.4byte	.LFE10-.LFB10
 1508 0253 01       		.uleb128 0x1
 1509 0254 9C       		.byte	0x9c
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 43


 1510 0255 69020000 		.4byte	0x269
 1511 0259 0C       		.uleb128 0xc
 1512 025a C2000000 		.4byte	.LASF41
 1513 025e 01       		.byte	0x1
 1514 025f 6602     		.2byte	0x266
 1515 0261 83000000 		.4byte	0x83
 1516 0265 02       		.uleb128 0x2
 1517 0266 91       		.byte	0x91
 1518 0267 74       		.sleb128 -12
 1519 0268 00       		.byte	0
 1520 0269 0F       		.uleb128 0xf
 1521 026a 49020000 		.4byte	.LASF42
 1522 026e 01       		.byte	0x1
 1523 026f 7E02     		.2byte	0x27e
 1524 0271 00000000 		.4byte	.LFB11
 1525 0275 1C000000 		.4byte	.LFE11-.LFB11
 1526 0279 01       		.uleb128 0x1
 1527 027a 9C       		.byte	0x9c
 1528 027b 8F020000 		.4byte	0x28f
 1529 027f 0C       		.uleb128 0xc
 1530 0280 1A030000 		.4byte	.LASF37
 1531 0284 01       		.byte	0x1
 1532 0285 7E02     		.2byte	0x27e
 1533 0287 83000000 		.4byte	0x83
 1534 028b 02       		.uleb128 0x2
 1535 028c 91       		.byte	0x91
 1536 028d 74       		.sleb128 -12
 1537 028e 00       		.byte	0
 1538 028f 0F       		.uleb128 0xf
 1539 0290 F6010000 		.4byte	.LASF43
 1540 0294 01       		.byte	0x1
 1541 0295 9502     		.2byte	0x295
 1542 0297 00000000 		.4byte	.LFB12
 1543 029b 1C000000 		.4byte	.LFE12-.LFB12
 1544 029f 01       		.uleb128 0x1
 1545 02a0 9C       		.byte	0x9c
 1546 02a1 B5020000 		.4byte	0x2b5
 1547 02a5 0C       		.uleb128 0xc
 1548 02a6 1A030000 		.4byte	.LASF37
 1549 02aa 01       		.byte	0x1
 1550 02ab 9502     		.2byte	0x295
 1551 02ad 83000000 		.4byte	0x83
 1552 02b1 02       		.uleb128 0x2
 1553 02b2 91       		.byte	0x91
 1554 02b3 74       		.sleb128 -12
 1555 02b4 00       		.byte	0
 1556 02b5 10       		.uleb128 0x10
 1557 02b6 04010000 		.4byte	.LASF44
 1558 02ba 01       		.byte	0x1
 1559 02bb B102     		.2byte	0x2b1
 1560 02bd 00000000 		.4byte	.LFB13
 1561 02c1 30000000 		.4byte	.LFE13-.LFB13
 1562 02c5 01       		.uleb128 0x1
 1563 02c6 9C       		.byte	0x9c
 1564 02c7 EA020000 		.4byte	0x2ea
 1565 02cb 0C       		.uleb128 0xc
 1566 02cc B0020000 		.4byte	.LASF33
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 44


 1567 02d0 01       		.byte	0x1
 1568 02d1 B102     		.2byte	0x2b1
 1569 02d3 83000000 		.4byte	0x83
 1570 02d7 02       		.uleb128 0x2
 1571 02d8 91       		.byte	0x91
 1572 02d9 74       		.sleb128 -12
 1573 02da 0C       		.uleb128 0xc
 1574 02db B5000000 		.4byte	.LASF45
 1575 02df 01       		.byte	0x1
 1576 02e0 B102     		.2byte	0x2b1
 1577 02e2 8F000000 		.4byte	0x8f
 1578 02e6 02       		.uleb128 0x2
 1579 02e7 91       		.byte	0x91
 1580 02e8 72       		.sleb128 -14
 1581 02e9 00       		.byte	0
 1582 02ea 10       		.uleb128 0x10
 1583 02eb 46010000 		.4byte	.LASF46
 1584 02ef 01       		.byte	0x1
 1585 02f0 D302     		.2byte	0x2d3
 1586 02f2 00000000 		.4byte	.LFB14
 1587 02f6 2C000000 		.4byte	.LFE14-.LFB14
 1588 02fa 01       		.uleb128 0x1
 1589 02fb 9C       		.byte	0x9c
 1590 02fc 1F030000 		.4byte	0x31f
 1591 0300 0C       		.uleb128 0xc
 1592 0301 B0020000 		.4byte	.LASF33
 1593 0305 01       		.byte	0x1
 1594 0306 D302     		.2byte	0x2d3
 1595 0308 83000000 		.4byte	0x83
 1596 030c 02       		.uleb128 0x2
 1597 030d 91       		.byte	0x91
 1598 030e 74       		.sleb128 -12
 1599 030f 0C       		.uleb128 0xc
 1600 0310 29020000 		.4byte	.LASF47
 1601 0314 01       		.byte	0x1
 1602 0315 D302     		.2byte	0x2d3
 1603 0317 9B000000 		.4byte	0x9b
 1604 031b 02       		.uleb128 0x2
 1605 031c 91       		.byte	0x91
 1606 031d 70       		.sleb128 -16
 1607 031e 00       		.byte	0
 1608 031f 0E       		.uleb128 0xe
 1609 0320 CC000000 		.4byte	.LASF48
 1610 0324 01       		.byte	0x1
 1611 0325 F402     		.2byte	0x2f4
 1612 0327 8F000000 		.4byte	0x8f
 1613 032b 00000000 		.4byte	.LFB15
 1614 032f A4000000 		.4byte	.LFE15-.LFB15
 1615 0333 01       		.uleb128 0x1
 1616 0334 9C       		.byte	0x9c
 1617 0335 67030000 		.4byte	0x367
 1618 0339 0C       		.uleb128 0xc
 1619 033a B0020000 		.4byte	.LASF33
 1620 033e 01       		.byte	0x1
 1621 033f F402     		.2byte	0x2f4
 1622 0341 83000000 		.4byte	0x83
 1623 0345 02       		.uleb128 0x2
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 45


 1624 0346 91       		.byte	0x91
 1625 0347 6C       		.sleb128 -20
 1626 0348 0C       		.uleb128 0xc
 1627 0349 38020000 		.4byte	.LASF49
 1628 034d 01       		.byte	0x1
 1629 034e F402     		.2byte	0x2f4
 1630 0350 8F000000 		.4byte	0x8f
 1631 0354 02       		.uleb128 0x2
 1632 0355 91       		.byte	0x91
 1633 0356 6A       		.sleb128 -22
 1634 0357 0D       		.uleb128 0xd
 1635 0358 B5020000 		.4byte	.LASF50
 1636 035c 01       		.byte	0x1
 1637 035d F602     		.2byte	0x2f6
 1638 035f 8F000000 		.4byte	0x8f
 1639 0363 02       		.uleb128 0x2
 1640 0364 91       		.byte	0x91
 1641 0365 76       		.sleb128 -10
 1642 0366 00       		.byte	0
 1643 0367 0E       		.uleb128 0xe
 1644 0368 C5020000 		.4byte	.LASF51
 1645 036c 01       		.byte	0x1
 1646 036d 2A03     		.2byte	0x32a
 1647 036f 9B000000 		.4byte	0x9b
 1648 0373 00000000 		.4byte	.LFB16
 1649 0377 90000000 		.4byte	.LFE16-.LFB16
 1650 037b 01       		.uleb128 0x1
 1651 037c 9C       		.byte	0x9c
 1652 037d AF030000 		.4byte	0x3af
 1653 0381 0C       		.uleb128 0xc
 1654 0382 B0020000 		.4byte	.LASF33
 1655 0386 01       		.byte	0x1
 1656 0387 2A03     		.2byte	0x32a
 1657 0389 83000000 		.4byte	0x83
 1658 038d 02       		.uleb128 0x2
 1659 038e 91       		.byte	0x91
 1660 038f 64       		.sleb128 -28
 1661 0390 0C       		.uleb128 0xc
 1662 0391 38020000 		.4byte	.LASF49
 1663 0395 01       		.byte	0x1
 1664 0396 2A03     		.2byte	0x32a
 1665 0398 8F000000 		.4byte	0x8f
 1666 039c 02       		.uleb128 0x2
 1667 039d 91       		.byte	0x91
 1668 039e 62       		.sleb128 -30
 1669 039f 0D       		.uleb128 0xd
 1670 03a0 E0000000 		.4byte	.LASF52
 1671 03a4 01       		.byte	0x1
 1672 03a5 2C03     		.2byte	0x32c
 1673 03a7 C1000000 		.4byte	0xc1
 1674 03ab 02       		.uleb128 0x2
 1675 03ac 91       		.byte	0x91
 1676 03ad 68       		.sleb128 -24
 1677 03ae 00       		.byte	0
 1678 03af 0E       		.uleb128 0xe
 1679 03b0 D9020000 		.4byte	.LASF53
 1680 03b4 01       		.byte	0x1
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 46


 1681 03b5 5703     		.2byte	0x357
 1682 03b7 A7000000 		.4byte	0xa7
 1683 03bb 00000000 		.4byte	.LFB17
 1684 03bf 80000000 		.4byte	.LFE17-.LFB17
 1685 03c3 01       		.uleb128 0x1
 1686 03c4 9C       		.byte	0x9c
 1687 03c5 F7030000 		.4byte	0x3f7
 1688 03c9 0C       		.uleb128 0xc
 1689 03ca B0020000 		.4byte	.LASF33
 1690 03ce 01       		.byte	0x1
 1691 03cf 5703     		.2byte	0x357
 1692 03d1 83000000 		.4byte	0x83
 1693 03d5 02       		.uleb128 0x2
 1694 03d6 91       		.byte	0x91
 1695 03d7 64       		.sleb128 -28
 1696 03d8 0C       		.uleb128 0xc
 1697 03d9 38020000 		.4byte	.LASF49
 1698 03dd 01       		.byte	0x1
 1699 03de 5703     		.2byte	0x357
 1700 03e0 8F000000 		.4byte	0x8f
 1701 03e4 02       		.uleb128 0x2
 1702 03e5 91       		.byte	0x91
 1703 03e6 62       		.sleb128 -30
 1704 03e7 0D       		.uleb128 0xd
 1705 03e8 AA020000 		.4byte	.LASF54
 1706 03ec 01       		.byte	0x1
 1707 03ed 5903     		.2byte	0x359
 1708 03ef A7000000 		.4byte	0xa7
 1709 03f3 02       		.uleb128 0x2
 1710 03f4 91       		.byte	0x91
 1711 03f5 6C       		.sleb128 -20
 1712 03f6 00       		.byte	0
 1713 03f7 11       		.uleb128 0x11
 1714 03f8 83000000 		.4byte	0x83
 1715 03fc 07040000 		.4byte	0x407
 1716 0400 12       		.uleb128 0x12
 1717 0401 E5000000 		.4byte	0xe5
 1718 0405 00       		.byte	0
 1719 0406 00       		.byte	0
 1720 0407 08       		.uleb128 0x8
 1721 0408 0E000000 		.4byte	.LASF55
 1722 040c 01       		.byte	0x1
 1723 040d 21       		.byte	0x21
 1724 040e 18040000 		.4byte	0x418
 1725 0412 05       		.uleb128 0x5
 1726 0413 03       		.byte	0x3
 1727 0414 00000000 		.4byte	ADC_channelsConfig
 1728 0418 13       		.uleb128 0x13
 1729 0419 F7030000 		.4byte	0x3f7
 1730 041d 14       		.uleb128 0x14
 1731 041e 71030000 		.4byte	.LASF56
 1732 0422 01       		.byte	0x1
 1733 0423 18       		.byte	0x18
 1734 0424 6B000000 		.4byte	0x6b
 1735 0428 05       		.uleb128 0x5
 1736 0429 03       		.byte	0x3
 1737 042a 00000000 		.4byte	ADC_initVar
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 47


 1738 042e 11       		.uleb128 0x11
 1739 042f 8F000000 		.4byte	0x8f
 1740 0433 3E040000 		.4byte	0x43e
 1741 0437 12       		.uleb128 0x12
 1742 0438 E5000000 		.4byte	0xe5
 1743 043c 00       		.byte	0
 1744 043d 00       		.byte	0
 1745 043e 14       		.uleb128 0x14
 1746 043f 31010000 		.4byte	.LASF57
 1747 0443 01       		.byte	0x1
 1748 0444 19       		.byte	0x19
 1749 0445 4F040000 		.4byte	0x44f
 1750 0449 05       		.uleb128 0x5
 1751 044a 03       		.byte	0x3
 1752 044b 00000000 		.4byte	ADC_offset
 1753 044f 05       		.uleb128 0x5
 1754 0450 2E040000 		.4byte	0x42e
 1755 0454 11       		.uleb128 0x11
 1756 0455 9B000000 		.4byte	0x9b
 1757 0459 64040000 		.4byte	0x464
 1758 045d 12       		.uleb128 0x12
 1759 045e E5000000 		.4byte	0xe5
 1760 0462 00       		.byte	0
 1761 0463 00       		.byte	0
 1762 0464 14       		.uleb128 0x14
 1763 0465 43030000 		.4byte	.LASF58
 1764 0469 01       		.byte	0x1
 1765 046a 1A       		.byte	0x1a
 1766 046b 75040000 		.4byte	0x475
 1767 046f 05       		.uleb128 0x5
 1768 0470 03       		.byte	0x3
 1769 0471 00000000 		.4byte	ADC_countsPer10Volt
 1770 0475 05       		.uleb128 0x5
 1771 0476 54040000 		.4byte	0x454
 1772 047a 00       		.byte	0
 1773              		.section	.debug_abbrev,"",%progbits
 1774              	.Ldebug_abbrev0:
 1775 0000 01       		.uleb128 0x1
 1776 0001 11       		.uleb128 0x11
 1777 0002 01       		.byte	0x1
 1778 0003 25       		.uleb128 0x25
 1779 0004 0E       		.uleb128 0xe
 1780 0005 13       		.uleb128 0x13
 1781 0006 0B       		.uleb128 0xb
 1782 0007 03       		.uleb128 0x3
 1783 0008 0E       		.uleb128 0xe
 1784 0009 1B       		.uleb128 0x1b
 1785 000a 0E       		.uleb128 0xe
 1786 000b 55       		.uleb128 0x55
 1787 000c 17       		.uleb128 0x17
 1788 000d 11       		.uleb128 0x11
 1789 000e 01       		.uleb128 0x1
 1790 000f 10       		.uleb128 0x10
 1791 0010 17       		.uleb128 0x17
 1792 0011 00       		.byte	0
 1793 0012 00       		.byte	0
 1794 0013 02       		.uleb128 0x2
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 48


 1795 0014 24       		.uleb128 0x24
 1796 0015 00       		.byte	0
 1797 0016 0B       		.uleb128 0xb
 1798 0017 0B       		.uleb128 0xb
 1799 0018 3E       		.uleb128 0x3e
 1800 0019 0B       		.uleb128 0xb
 1801 001a 03       		.uleb128 0x3
 1802 001b 0E       		.uleb128 0xe
 1803 001c 00       		.byte	0
 1804 001d 00       		.byte	0
 1805 001e 03       		.uleb128 0x3
 1806 001f 24       		.uleb128 0x24
 1807 0020 00       		.byte	0
 1808 0021 0B       		.uleb128 0xb
 1809 0022 0B       		.uleb128 0xb
 1810 0023 3E       		.uleb128 0x3e
 1811 0024 0B       		.uleb128 0xb
 1812 0025 03       		.uleb128 0x3
 1813 0026 08       		.uleb128 0x8
 1814 0027 00       		.byte	0
 1815 0028 00       		.byte	0
 1816 0029 04       		.uleb128 0x4
 1817 002a 16       		.uleb128 0x16
 1818 002b 00       		.byte	0
 1819 002c 03       		.uleb128 0x3
 1820 002d 0E       		.uleb128 0xe
 1821 002e 3A       		.uleb128 0x3a
 1822 002f 0B       		.uleb128 0xb
 1823 0030 3B       		.uleb128 0x3b
 1824 0031 05       		.uleb128 0x5
 1825 0032 49       		.uleb128 0x49
 1826 0033 13       		.uleb128 0x13
 1827 0034 00       		.byte	0
 1828 0035 00       		.byte	0
 1829 0036 05       		.uleb128 0x5
 1830 0037 35       		.uleb128 0x35
 1831 0038 00       		.byte	0
 1832 0039 49       		.uleb128 0x49
 1833 003a 13       		.uleb128 0x13
 1834 003b 00       		.byte	0
 1835 003c 00       		.byte	0
 1836 003d 06       		.uleb128 0x6
 1837 003e 2E       		.uleb128 0x2e
 1838 003f 00       		.byte	0
 1839 0040 3F       		.uleb128 0x3f
 1840 0041 19       		.uleb128 0x19
 1841 0042 03       		.uleb128 0x3
 1842 0043 0E       		.uleb128 0xe
 1843 0044 3A       		.uleb128 0x3a
 1844 0045 0B       		.uleb128 0xb
 1845 0046 3B       		.uleb128 0x3b
 1846 0047 0B       		.uleb128 0xb
 1847 0048 27       		.uleb128 0x27
 1848 0049 19       		.uleb128 0x19
 1849 004a 11       		.uleb128 0x11
 1850 004b 01       		.uleb128 0x1
 1851 004c 12       		.uleb128 0x12
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 49


 1852 004d 06       		.uleb128 0x6
 1853 004e 40       		.uleb128 0x40
 1854 004f 18       		.uleb128 0x18
 1855 0050 9642     		.uleb128 0x2116
 1856 0052 19       		.uleb128 0x19
 1857 0053 00       		.byte	0
 1858 0054 00       		.byte	0
 1859 0055 07       		.uleb128 0x7
 1860 0056 2E       		.uleb128 0x2e
 1861 0057 01       		.byte	0x1
 1862 0058 3F       		.uleb128 0x3f
 1863 0059 19       		.uleb128 0x19
 1864 005a 03       		.uleb128 0x3
 1865 005b 0E       		.uleb128 0xe
 1866 005c 3A       		.uleb128 0x3a
 1867 005d 0B       		.uleb128 0xb
 1868 005e 3B       		.uleb128 0x3b
 1869 005f 0B       		.uleb128 0xb
 1870 0060 27       		.uleb128 0x27
 1871 0061 19       		.uleb128 0x19
 1872 0062 11       		.uleb128 0x11
 1873 0063 01       		.uleb128 0x1
 1874 0064 12       		.uleb128 0x12
 1875 0065 06       		.uleb128 0x6
 1876 0066 40       		.uleb128 0x40
 1877 0067 18       		.uleb128 0x18
 1878 0068 9642     		.uleb128 0x2116
 1879 006a 19       		.uleb128 0x19
 1880 006b 01       		.uleb128 0x1
 1881 006c 13       		.uleb128 0x13
 1882 006d 00       		.byte	0
 1883 006e 00       		.byte	0
 1884 006f 08       		.uleb128 0x8
 1885 0070 34       		.uleb128 0x34
 1886 0071 00       		.byte	0
 1887 0072 03       		.uleb128 0x3
 1888 0073 0E       		.uleb128 0xe
 1889 0074 3A       		.uleb128 0x3a
 1890 0075 0B       		.uleb128 0xb
 1891 0076 3B       		.uleb128 0x3b
 1892 0077 0B       		.uleb128 0xb
 1893 0078 49       		.uleb128 0x49
 1894 0079 13       		.uleb128 0x13
 1895 007a 02       		.uleb128 0x2
 1896 007b 18       		.uleb128 0x18
 1897 007c 00       		.byte	0
 1898 007d 00       		.byte	0
 1899 007e 09       		.uleb128 0x9
 1900 007f 2E       		.uleb128 0x2e
 1901 0080 00       		.byte	0
 1902 0081 3F       		.uleb128 0x3f
 1903 0082 19       		.uleb128 0x19
 1904 0083 03       		.uleb128 0x3
 1905 0084 0E       		.uleb128 0xe
 1906 0085 3A       		.uleb128 0x3a
 1907 0086 0B       		.uleb128 0xb
 1908 0087 3B       		.uleb128 0x3b
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 50


 1909 0088 05       		.uleb128 0x5
 1910 0089 27       		.uleb128 0x27
 1911 008a 19       		.uleb128 0x19
 1912 008b 11       		.uleb128 0x11
 1913 008c 01       		.uleb128 0x1
 1914 008d 12       		.uleb128 0x12
 1915 008e 06       		.uleb128 0x6
 1916 008f 40       		.uleb128 0x40
 1917 0090 18       		.uleb128 0x18
 1918 0091 9642     		.uleb128 0x2116
 1919 0093 19       		.uleb128 0x19
 1920 0094 00       		.byte	0
 1921 0095 00       		.byte	0
 1922 0096 0A       		.uleb128 0xa
 1923 0097 2E       		.uleb128 0x2e
 1924 0098 00       		.byte	0
 1925 0099 3F       		.uleb128 0x3f
 1926 009a 19       		.uleb128 0x19
 1927 009b 03       		.uleb128 0x3
 1928 009c 0E       		.uleb128 0xe
 1929 009d 3A       		.uleb128 0x3a
 1930 009e 0B       		.uleb128 0xb
 1931 009f 3B       		.uleb128 0x3b
 1932 00a0 05       		.uleb128 0x5
 1933 00a1 27       		.uleb128 0x27
 1934 00a2 19       		.uleb128 0x19
 1935 00a3 11       		.uleb128 0x11
 1936 00a4 01       		.uleb128 0x1
 1937 00a5 12       		.uleb128 0x12
 1938 00a6 06       		.uleb128 0x6
 1939 00a7 40       		.uleb128 0x40
 1940 00a8 18       		.uleb128 0x18
 1941 00a9 9742     		.uleb128 0x2117
 1942 00ab 19       		.uleb128 0x19
 1943 00ac 00       		.byte	0
 1944 00ad 00       		.byte	0
 1945 00ae 0B       		.uleb128 0xb
 1946 00af 2E       		.uleb128 0x2e
 1947 00b0 01       		.byte	0x1
 1948 00b1 3F       		.uleb128 0x3f
 1949 00b2 19       		.uleb128 0x19
 1950 00b3 03       		.uleb128 0x3
 1951 00b4 0E       		.uleb128 0xe
 1952 00b5 3A       		.uleb128 0x3a
 1953 00b6 0B       		.uleb128 0xb
 1954 00b7 3B       		.uleb128 0x3b
 1955 00b8 05       		.uleb128 0x5
 1956 00b9 27       		.uleb128 0x27
 1957 00ba 19       		.uleb128 0x19
 1958 00bb 49       		.uleb128 0x49
 1959 00bc 13       		.uleb128 0x13
 1960 00bd 11       		.uleb128 0x11
 1961 00be 01       		.uleb128 0x1
 1962 00bf 12       		.uleb128 0x12
 1963 00c0 06       		.uleb128 0x6
 1964 00c1 40       		.uleb128 0x40
 1965 00c2 18       		.uleb128 0x18
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 51


 1966 00c3 9742     		.uleb128 0x2117
 1967 00c5 19       		.uleb128 0x19
 1968 00c6 01       		.uleb128 0x1
 1969 00c7 13       		.uleb128 0x13
 1970 00c8 00       		.byte	0
 1971 00c9 00       		.byte	0
 1972 00ca 0C       		.uleb128 0xc
 1973 00cb 05       		.uleb128 0x5
 1974 00cc 00       		.byte	0
 1975 00cd 03       		.uleb128 0x3
 1976 00ce 0E       		.uleb128 0xe
 1977 00cf 3A       		.uleb128 0x3a
 1978 00d0 0B       		.uleb128 0xb
 1979 00d1 3B       		.uleb128 0x3b
 1980 00d2 05       		.uleb128 0x5
 1981 00d3 49       		.uleb128 0x49
 1982 00d4 13       		.uleb128 0x13
 1983 00d5 02       		.uleb128 0x2
 1984 00d6 18       		.uleb128 0x18
 1985 00d7 00       		.byte	0
 1986 00d8 00       		.byte	0
 1987 00d9 0D       		.uleb128 0xd
 1988 00da 34       		.uleb128 0x34
 1989 00db 00       		.byte	0
 1990 00dc 03       		.uleb128 0x3
 1991 00dd 0E       		.uleb128 0xe
 1992 00de 3A       		.uleb128 0x3a
 1993 00df 0B       		.uleb128 0xb
 1994 00e0 3B       		.uleb128 0x3b
 1995 00e1 05       		.uleb128 0x5
 1996 00e2 49       		.uleb128 0x49
 1997 00e3 13       		.uleb128 0x13
 1998 00e4 02       		.uleb128 0x2
 1999 00e5 18       		.uleb128 0x18
 2000 00e6 00       		.byte	0
 2001 00e7 00       		.byte	0
 2002 00e8 0E       		.uleb128 0xe
 2003 00e9 2E       		.uleb128 0x2e
 2004 00ea 01       		.byte	0x1
 2005 00eb 3F       		.uleb128 0x3f
 2006 00ec 19       		.uleb128 0x19
 2007 00ed 03       		.uleb128 0x3
 2008 00ee 0E       		.uleb128 0xe
 2009 00ef 3A       		.uleb128 0x3a
 2010 00f0 0B       		.uleb128 0xb
 2011 00f1 3B       		.uleb128 0x3b
 2012 00f2 05       		.uleb128 0x5
 2013 00f3 27       		.uleb128 0x27
 2014 00f4 19       		.uleb128 0x19
 2015 00f5 49       		.uleb128 0x49
 2016 00f6 13       		.uleb128 0x13
 2017 00f7 11       		.uleb128 0x11
 2018 00f8 01       		.uleb128 0x1
 2019 00f9 12       		.uleb128 0x12
 2020 00fa 06       		.uleb128 0x6
 2021 00fb 40       		.uleb128 0x40
 2022 00fc 18       		.uleb128 0x18
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 52


 2023 00fd 9642     		.uleb128 0x2116
 2024 00ff 19       		.uleb128 0x19
 2025 0100 01       		.uleb128 0x1
 2026 0101 13       		.uleb128 0x13
 2027 0102 00       		.byte	0
 2028 0103 00       		.byte	0
 2029 0104 0F       		.uleb128 0xf
 2030 0105 2E       		.uleb128 0x2e
 2031 0106 01       		.byte	0x1
 2032 0107 3F       		.uleb128 0x3f
 2033 0108 19       		.uleb128 0x19
 2034 0109 03       		.uleb128 0x3
 2035 010a 0E       		.uleb128 0xe
 2036 010b 3A       		.uleb128 0x3a
 2037 010c 0B       		.uleb128 0xb
 2038 010d 3B       		.uleb128 0x3b
 2039 010e 05       		.uleb128 0x5
 2040 010f 27       		.uleb128 0x27
 2041 0110 19       		.uleb128 0x19
 2042 0111 11       		.uleb128 0x11
 2043 0112 01       		.uleb128 0x1
 2044 0113 12       		.uleb128 0x12
 2045 0114 06       		.uleb128 0x6
 2046 0115 40       		.uleb128 0x40
 2047 0116 18       		.uleb128 0x18
 2048 0117 9742     		.uleb128 0x2117
 2049 0119 19       		.uleb128 0x19
 2050 011a 01       		.uleb128 0x1
 2051 011b 13       		.uleb128 0x13
 2052 011c 00       		.byte	0
 2053 011d 00       		.byte	0
 2054 011e 10       		.uleb128 0x10
 2055 011f 2E       		.uleb128 0x2e
 2056 0120 01       		.byte	0x1
 2057 0121 3F       		.uleb128 0x3f
 2058 0122 19       		.uleb128 0x19
 2059 0123 03       		.uleb128 0x3
 2060 0124 0E       		.uleb128 0xe
 2061 0125 3A       		.uleb128 0x3a
 2062 0126 0B       		.uleb128 0xb
 2063 0127 3B       		.uleb128 0x3b
 2064 0128 05       		.uleb128 0x5
 2065 0129 27       		.uleb128 0x27
 2066 012a 19       		.uleb128 0x19
 2067 012b 11       		.uleb128 0x11
 2068 012c 01       		.uleb128 0x1
 2069 012d 12       		.uleb128 0x12
 2070 012e 06       		.uleb128 0x6
 2071 012f 40       		.uleb128 0x40
 2072 0130 18       		.uleb128 0x18
 2073 0131 9642     		.uleb128 0x2116
 2074 0133 19       		.uleb128 0x19
 2075 0134 01       		.uleb128 0x1
 2076 0135 13       		.uleb128 0x13
 2077 0136 00       		.byte	0
 2078 0137 00       		.byte	0
 2079 0138 11       		.uleb128 0x11
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 53


 2080 0139 01       		.uleb128 0x1
 2081 013a 01       		.byte	0x1
 2082 013b 49       		.uleb128 0x49
 2083 013c 13       		.uleb128 0x13
 2084 013d 01       		.uleb128 0x1
 2085 013e 13       		.uleb128 0x13
 2086 013f 00       		.byte	0
 2087 0140 00       		.byte	0
 2088 0141 12       		.uleb128 0x12
 2089 0142 21       		.uleb128 0x21
 2090 0143 00       		.byte	0
 2091 0144 49       		.uleb128 0x49
 2092 0145 13       		.uleb128 0x13
 2093 0146 2F       		.uleb128 0x2f
 2094 0147 0B       		.uleb128 0xb
 2095 0148 00       		.byte	0
 2096 0149 00       		.byte	0
 2097 014a 13       		.uleb128 0x13
 2098 014b 26       		.uleb128 0x26
 2099 014c 00       		.byte	0
 2100 014d 49       		.uleb128 0x49
 2101 014e 13       		.uleb128 0x13
 2102 014f 00       		.byte	0
 2103 0150 00       		.byte	0
 2104 0151 14       		.uleb128 0x14
 2105 0152 34       		.uleb128 0x34
 2106 0153 00       		.byte	0
 2107 0154 03       		.uleb128 0x3
 2108 0155 0E       		.uleb128 0xe
 2109 0156 3A       		.uleb128 0x3a
 2110 0157 0B       		.uleb128 0xb
 2111 0158 3B       		.uleb128 0x3b
 2112 0159 0B       		.uleb128 0xb
 2113 015a 49       		.uleb128 0x49
 2114 015b 13       		.uleb128 0x13
 2115 015c 3F       		.uleb128 0x3f
 2116 015d 19       		.uleb128 0x19
 2117 015e 02       		.uleb128 0x2
 2118 015f 18       		.uleb128 0x18
 2119 0160 00       		.byte	0
 2120 0161 00       		.byte	0
 2121 0162 00       		.byte	0
 2122              		.section	.debug_aranges,"",%progbits
 2123 0000 A4000000 		.4byte	0xa4
 2124 0004 0200     		.2byte	0x2
 2125 0006 00000000 		.4byte	.Ldebug_info0
 2126 000a 04       		.byte	0x4
 2127 000b 00       		.byte	0
 2128 000c 0000     		.2byte	0
 2129 000e 0000     		.2byte	0
 2130 0010 00000000 		.4byte	.LFB0
 2131 0014 24000000 		.4byte	.LFE0-.LFB0
 2132 0018 00000000 		.4byte	.LFB1
 2133 001c C4010000 		.4byte	.LFE1-.LFB1
 2134 0020 00000000 		.4byte	.LFB2
 2135 0024 28000000 		.4byte	.LFE2-.LFB2
 2136 0028 00000000 		.4byte	.LFB3
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 54


 2137 002c 18000000 		.4byte	.LFE3-.LFB3
 2138 0030 00000000 		.4byte	.LFB4
 2139 0034 1C000000 		.4byte	.LFE4-.LFB4
 2140 0038 00000000 		.4byte	.LFB5
 2141 003c 1C000000 		.4byte	.LFE5-.LFB5
 2142 0040 00000000 		.4byte	.LFB6
 2143 0044 48000000 		.4byte	.LFE6-.LFB6
 2144 0048 00000000 		.4byte	.LFB7
 2145 004c 44000000 		.4byte	.LFE7-.LFB7
 2146 0050 00000000 		.4byte	.LFB8
 2147 0054 1C000000 		.4byte	.LFE8-.LFB8
 2148 0058 00000000 		.4byte	.LFB9
 2149 005c 30000000 		.4byte	.LFE9-.LFB9
 2150 0060 00000000 		.4byte	.LFB10
 2151 0064 2C000000 		.4byte	.LFE10-.LFB10
 2152 0068 00000000 		.4byte	.LFB11
 2153 006c 1C000000 		.4byte	.LFE11-.LFB11
 2154 0070 00000000 		.4byte	.LFB12
 2155 0074 1C000000 		.4byte	.LFE12-.LFB12
 2156 0078 00000000 		.4byte	.LFB13
 2157 007c 30000000 		.4byte	.LFE13-.LFB13
 2158 0080 00000000 		.4byte	.LFB14
 2159 0084 2C000000 		.4byte	.LFE14-.LFB14
 2160 0088 00000000 		.4byte	.LFB15
 2161 008c A4000000 		.4byte	.LFE15-.LFB15
 2162 0090 00000000 		.4byte	.LFB16
 2163 0094 90000000 		.4byte	.LFE16-.LFB16
 2164 0098 00000000 		.4byte	.LFB17
 2165 009c 80000000 		.4byte	.LFE17-.LFB17
 2166 00a0 00000000 		.4byte	0
 2167 00a4 00000000 		.4byte	0
 2168              		.section	.debug_ranges,"",%progbits
 2169              	.Ldebug_ranges0:
 2170 0000 00000000 		.4byte	.LFB0
 2171 0004 24000000 		.4byte	.LFE0
 2172 0008 00000000 		.4byte	.LFB1
 2173 000c C4010000 		.4byte	.LFE1
 2174 0010 00000000 		.4byte	.LFB2
 2175 0014 28000000 		.4byte	.LFE2
 2176 0018 00000000 		.4byte	.LFB3
 2177 001c 18000000 		.4byte	.LFE3
 2178 0020 00000000 		.4byte	.LFB4
 2179 0024 1C000000 		.4byte	.LFE4
 2180 0028 00000000 		.4byte	.LFB5
 2181 002c 1C000000 		.4byte	.LFE5
 2182 0030 00000000 		.4byte	.LFB6
 2183 0034 48000000 		.4byte	.LFE6
 2184 0038 00000000 		.4byte	.LFB7
 2185 003c 44000000 		.4byte	.LFE7
 2186 0040 00000000 		.4byte	.LFB8
 2187 0044 1C000000 		.4byte	.LFE8
 2188 0048 00000000 		.4byte	.LFB9
 2189 004c 30000000 		.4byte	.LFE9
 2190 0050 00000000 		.4byte	.LFB10
 2191 0054 2C000000 		.4byte	.LFE10
 2192 0058 00000000 		.4byte	.LFB11
 2193 005c 1C000000 		.4byte	.LFE11
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 55


 2194 0060 00000000 		.4byte	.LFB12
 2195 0064 1C000000 		.4byte	.LFE12
 2196 0068 00000000 		.4byte	.LFB13
 2197 006c 30000000 		.4byte	.LFE13
 2198 0070 00000000 		.4byte	.LFB14
 2199 0074 2C000000 		.4byte	.LFE14
 2200 0078 00000000 		.4byte	.LFB15
 2201 007c A4000000 		.4byte	.LFE15
 2202 0080 00000000 		.4byte	.LFB16
 2203 0084 90000000 		.4byte	.LFE16
 2204 0088 00000000 		.4byte	.LFB17
 2205 008c 80000000 		.4byte	.LFE17
 2206 0090 00000000 		.4byte	0
 2207 0094 00000000 		.4byte	0
 2208              		.section	.debug_line,"",%progbits
 2209              	.Ldebug_line0:
 2210 0000 92020000 		.section	.debug_str,"MS",%progbits,1
 2210      02004000 
 2210      00000201 
 2210      FB0E0D00 
 2210      01010101 
 2211              	.LASF6:
 2212 0000 6C6F6E67 		.ascii	"long long int\000"
 2212      206C6F6E 
 2212      6720696E 
 2212      7400
 2213              	.LASF55:
 2214 000e 4144435F 		.ascii	"ADC_channelsConfig\000"
 2214      6368616E 
 2214      6E656C73 
 2214      436F6E66 
 2214      696700
 2215              	.LASF19:
 2216 0021 72656733 		.ascii	"reg32\000"
 2216      3200
 2217              	.LASF59:
 2218 0027 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2218      4320342E 
 2218      392E3320 
 2218      32303135 
 2218      30333033 
 2219 005a 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2219      20726576 
 2219      6973696F 
 2219      6E203232 
 2219      31323230 
 2220 008d 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2220      66756E63 
 2220      74696F6E 
 2220      2D736563 
 2220      74696F6E 
 2221              	.LASF45:
 2222 00b5 6F666673 		.ascii	"offset\000"
 2222      657400
 2223              	.LASF15:
 2224 00bc 666C6F61 		.ascii	"float\000"
 2224      7400
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 56


 2225              	.LASF41:
 2226 00c2 68696768 		.ascii	"highLimit\000"
 2226      4C696D69 
 2226      7400
 2227              	.LASF48:
 2228 00cc 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2228      436F756E 
 2228      7473546F 
 2228      5F6D566F 
 2228      6C747300 
 2229              	.LASF52:
 2230 00e0 75566F6C 		.ascii	"uVolts\000"
 2230      747300
 2231              	.LASF3:
 2232 00e7 73686F72 		.ascii	"short unsigned int\000"
 2232      7420756E 
 2232      7369676E 
 2232      65642069 
 2232      6E7400
 2233              	.LASF2:
 2234 00fa 73686F72 		.ascii	"short int\000"
 2234      7420696E 
 2234      7400
 2235              	.LASF44:
 2236 0104 4144435F 		.ascii	"ADC_SetOffset\000"
 2236      5365744F 
 2236      66667365 
 2236      7400
 2237              	.LASF38:
 2238 0112 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2238      5365744C 
 2238      6F774C69 
 2238      6D697400 
 2239              	.LASF29:
 2240 0122 73746174 		.ascii	"status\000"
 2240      757300
 2241              	.LASF14:
 2242 0129 666C6F61 		.ascii	"float32\000"
 2242      74333200 
 2243              	.LASF57:
 2244 0131 4144435F 		.ascii	"ADC_offset\000"
 2244      6F666673 
 2244      657400
 2245              	.LASF22:
 2246 013c 746D7052 		.ascii	"tmpRegVal\000"
 2246      65675661 
 2246      6C00
 2247              	.LASF46:
 2248 0146 4144435F 		.ascii	"ADC_SetGain\000"
 2248      53657447 
 2248      61696E00 
 2249              	.LASF1:
 2250 0152 756E7369 		.ascii	"unsigned char\000"
 2250      676E6564 
 2250      20636861 
 2250      7200
 2251              	.LASF40:
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 57


 2252 0160 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2252      53657448 
 2252      6967684C 
 2252      696D6974 
 2252      00
 2253              	.LASF12:
 2254 0171 696E7431 		.ascii	"int16\000"
 2254      3600
 2255              	.LASF5:
 2256 0177 6C6F6E67 		.ascii	"long unsigned int\000"
 2256      20756E73 
 2256      69676E65 
 2256      6420696E 
 2256      7400
 2257              	.LASF13:
 2258 0189 696E7433 		.ascii	"int32\000"
 2258      3200
 2259              	.LASF61:
 2260 018f 5A3A5C45 		.ascii	"Z:\\Electronics Win7\\PSoC projects\\FV-1 Controlle"
 2260      6C656374 
 2260      726F6E69 
 2260      63732057 
 2260      696E375C 
 2261 01bf 725C6676 		.ascii	"r\\fv1_controller.cydsn\000"
 2261      315F636F 
 2261      6E74726F 
 2261      6C6C6572 
 2261      2E637964 
 2262              	.LASF31:
 2263 01d6 4144435F 		.ascii	"ADC_GetResult16\000"
 2263      47657452 
 2263      6573756C 
 2263      74313600 
 2264              	.LASF36:
 2265 01e6 4144435F 		.ascii	"ADC_SetChanMask\000"
 2265      53657443 
 2265      68616E4D 
 2265      61736B00 
 2266              	.LASF43:
 2267 01f6 4144435F 		.ascii	"ADC_SetSatMask\000"
 2267      53657453 
 2267      61744D61 
 2267      736B00
 2268              	.LASF30:
 2269 0205 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2269      4973456E 
 2269      64436F6E 
 2269      76657273 
 2269      696F6E00 
 2270              	.LASF16:
 2271 0219 646F7562 		.ascii	"double\000"
 2271      6C6500
 2272              	.LASF39:
 2273 0220 6C6F774C 		.ascii	"lowLimit\000"
 2273      696D6974 
 2273      00
 2274              	.LASF47:
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 58


 2275 0229 61646347 		.ascii	"adcGain\000"
 2275      61696E00 
 2276              	.LASF10:
 2277 0231 75696E74 		.ascii	"uint16\000"
 2277      313600
 2278              	.LASF49:
 2279 0238 61646343 		.ascii	"adcCounts\000"
 2279      6F756E74 
 2279      7300
 2280              	.LASF11:
 2281 0242 75696E74 		.ascii	"uint32\000"
 2281      333200
 2282              	.LASF42:
 2283 0249 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2283      5365744C 
 2283      696D6974 
 2283      4D61736B 
 2283      00
 2284              	.LASF8:
 2285 025a 756E7369 		.ascii	"unsigned int\000"
 2285      676E6564 
 2285      20696E74 
 2285      00
 2286              	.LASF25:
 2287 0267 4144435F 		.ascii	"ADC_Enable\000"
 2287      456E6162 
 2287      6C6500
 2288              	.LASF23:
 2289 0272 636F756E 		.ascii	"counts\000"
 2289      747300
 2290              	.LASF7:
 2291 0279 6C6F6E67 		.ascii	"long long unsigned int\000"
 2291      206C6F6E 
 2291      6720756E 
 2291      7369676E 
 2291      65642069 
 2292              	.LASF34:
 2293 0290 72657375 		.ascii	"result\000"
 2293      6C7400
 2294              	.LASF24:
 2295 0297 4144435F 		.ascii	"ADC_Start\000"
 2295      53746172 
 2295      7400
 2296              	.LASF35:
 2297 02a1 4144435F 		.ascii	"ADC_Init\000"
 2297      496E6974 
 2297      00
 2298              	.LASF54:
 2299 02aa 766F6C74 		.ascii	"volts\000"
 2299      7300
 2300              	.LASF33:
 2301 02b0 6368616E 		.ascii	"chan\000"
 2301      00
 2302              	.LASF50:
 2303 02b5 6D566F6C 		.ascii	"mVolts\000"
 2303      747300
 2304              	.LASF20:
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 59


 2305 02bc 73697A65 		.ascii	"sizetype\000"
 2305      74797065 
 2305      00
 2306              	.LASF51:
 2307 02c5 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2307      436F756E 
 2307      7473546F 
 2307      5F75566F 
 2307      6C747300 
 2308              	.LASF53:
 2309 02d9 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2309      436F756E 
 2309      7473546F 
 2309      5F566F6C 
 2309      747300
 2310              	.LASF27:
 2311 02ec 4144435F 		.ascii	"ADC_StartConvert\000"
 2311      53746172 
 2311      74436F6E 
 2311      76657274 
 2311      00
 2312              	.LASF60:
 2313 02fd 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC.c\000"
 2313      72617465 
 2313      645F536F 
 2313      75726365 
 2313      5C50536F 
 2314              	.LASF37:
 2315 031a 6D61736B 		.ascii	"mask\000"
 2315      00
 2316              	.LASF21:
 2317 031f 63684E75 		.ascii	"chNum\000"
 2317      6D00
 2318              	.LASF32:
 2319 0325 7265744D 		.ascii	"retMode\000"
 2319      6F646500 
 2320              	.LASF28:
 2321 032d 4144435F 		.ascii	"ADC_StopConvert\000"
 2321      53746F70 
 2321      436F6E76 
 2321      65727400 
 2322              	.LASF9:
 2323 033d 75696E74 		.ascii	"uint8\000"
 2323      3800
 2324              	.LASF58:
 2325 0343 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2325      636F756E 
 2325      74735065 
 2325      72313056 
 2325      6F6C7400 
 2326              	.LASF4:
 2327 0357 6C6F6E67 		.ascii	"long int\000"
 2327      20696E74 
 2327      00
 2328              	.LASF18:
 2329 0360 63686172 		.ascii	"char\000"
 2329      00
ARM GAS  C:\Users\jn\AppData\Local\Temp\ccQzZGGX.s 			page 60


 2330              	.LASF0:
 2331 0365 7369676E 		.ascii	"signed char\000"
 2331      65642063 
 2331      68617200 
 2332              	.LASF56:
 2333 0371 4144435F 		.ascii	"ADC_initVar\000"
 2333      696E6974 
 2333      56617200 
 2334              	.LASF17:
 2335 037d 696E7436 		.ascii	"int64\000"
 2335      3400
 2336              	.LASF26:
 2337 0383 4144435F 		.ascii	"ADC_Stop\000"
 2337      53746F70 
 2337      00
 2338              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
